
build/dedes.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002ba 	.word	0x080002ba
 8000010:	080002ba 	.word	0x080002ba
 8000014:	080002ba 	.word	0x080002ba
 8000018:	080002ba 	.word	0x080002ba
 800001c:	080002ba 	.word	0x080002ba
 8000020:	080002ba 	.word	0x080002ba
 8000024:	080002ba 	.word	0x080002ba
 8000028:	080002ba 	.word	0x080002ba
 800002c:	080021d1 	.word	0x080021d1
 8000030:	080002ba 	.word	0x080002ba
 8000034:	080002ba 	.word	0x080002ba
 8000038:	080002ba 	.word	0x080002ba
 800003c:	080002ba 	.word	0x080002ba
 8000040:	080002ba 	.word	0x080002ba
 8000044:	080002ba 	.word	0x080002ba
 8000048:	080002ba 	.word	0x080002ba
 800004c:	080002ba 	.word	0x080002ba
 8000050:	080002ba 	.word	0x080002ba
 8000054:	080002ba 	.word	0x080002ba
 8000058:	080015f1 	.word	0x080015f1
 800005c:	080015c1 	.word	0x080015c1
 8000060:	08001591 	.word	0x08001591
 8000064:	08001561 	.word	0x08001561
 8000068:	08001531 	.word	0x08001531
 800006c:	08001261 	.word	0x08001261
 8000070:	08001231 	.word	0x08001231
 8000074:	08001201 	.word	0x08001201
 8000078:	080011d1 	.word	0x080011d1
 800007c:	080011a1 	.word	0x080011a1
 8000080:	08001171 	.word	0x08001171
 8000084:	08001141 	.word	0x08001141
 8000088:	080013c1 	.word	0x080013c1
 800008c:	080002ba 	.word	0x080002ba
 8000090:	080002ba 	.word	0x080002ba
 8000094:	080002ba 	.word	0x080002ba
 8000098:	080002ba 	.word	0x080002ba
 800009c:	080014c1 	.word	0x080014c1
 80000a0:	080002ba 	.word	0x080002ba
 80000a4:	080002ba 	.word	0x080002ba
 80000a8:	080002ba 	.word	0x080002ba
 80000ac:	080002ba 	.word	0x080002ba
 80000b0:	08000e21 	.word	0x08000e21
 80000b4:	080002ba 	.word	0x080002ba
 80000b8:	080002ba 	.word	0x080002ba
 80000bc:	080002ba 	.word	0x080002ba
 80000c0:	080002ba 	.word	0x080002ba
 80000c4:	080002ba 	.word	0x080002ba
 80000c8:	080002ba 	.word	0x080002ba
 80000cc:	080002ba 	.word	0x080002ba
 80000d0:	080002ba 	.word	0x080002ba
 80000d4:	080002ba 	.word	0x080002ba
 80000d8:	08000c51 	.word	0x08000c51
 80000dc:	080002ba 	.word	0x080002ba
 80000e0:	08001441 	.word	0x08001441
 80000e4:	080002ba 	.word	0x080002ba
 80000e8:	080002ba 	.word	0x080002ba
 80000ec:	080002ba 	.word	0x080002ba
 80000f0:	080002ba 	.word	0x080002ba
 80000f4:	080002ba 	.word	0x080002ba
 80000f8:	080002ba 	.word	0x080002ba
 80000fc:	08001111 	.word	0x08001111
 8000100:	080002ba 	.word	0x080002ba
 8000104:	080002ba 	.word	0x080002ba
 8000108:	080002ba 	.word	0x080002ba
 800010c:	080002ba 	.word	0x080002ba
 8000110:	080002ba 	.word	0x080002ba
 8000114:	080002ba 	.word	0x080002ba
 8000118:	080002ba 	.word	0x080002ba
 800011c:	080002ba 	.word	0x080002ba
 8000120:	080010e1 	.word	0x080010e1
 8000124:	080010b1 	.word	0x080010b1
 8000128:	08001081 	.word	0x08001081
 800012c:	08001051 	.word	0x08001051
 8000130:	08001021 	.word	0x08001021
 8000134:	080002ba 	.word	0x080002ba
 8000138:	080002ba 	.word	0x080002ba
 800013c:	080002ba 	.word	0x080002ba
 8000140:	080002ba 	.word	0x080002ba
 8000144:	080002ba 	.word	0x080002ba
 8000148:	080002ba 	.word	0x080002ba
 800014c:	080002ba 	.word	0x080002ba
 8000150:	08000ff1 	.word	0x08000ff1
 8000154:	08000fc1 	.word	0x08000fc1
 8000158:	08000f91 	.word	0x08000f91
 800015c:	080002ba 	.word	0x080002ba
 8000160:	080002ba 	.word	0x080002ba
 8000164:	080002ba 	.word	0x080002ba
 8000168:	080002ba 	.word	0x080002ba
 800016c:	080002ba 	.word	0x080002ba
 8000170:	080002ba 	.word	0x080002ba
 8000174:	080002ba 	.word	0x080002ba
 8000178:	080002ba 	.word	0x080002ba
 800017c:	080002ba 	.word	0x080002ba
 8000180:	080002ba 	.word	0x080002ba
 8000184:	080002ba 	.word	0x080002ba
 8000188:	080002ba 	.word	0x080002ba
 800018c:	080002ba 	.word	0x080002ba
 8000190:	080002ba 	.word	0x080002ba
 8000194:	080002ba 	.word	0x080002ba
 8000198:	080002ba 	.word	0x080002ba
 800019c:	080002ba 	.word	0x080002ba
 80001a0:	080002ba 	.word	0x080002ba
 80001a4:	080002ba 	.word	0x080002ba
 80001a8:	080002ba 	.word	0x080002ba
 80001ac:	080002ba 	.word	0x080002ba
 80001b0:	080002ba 	.word	0x080002ba
 80001b4:	080002ba 	.word	0x080002ba
 80001b8:	080002ba 	.word	0x080002ba
 80001bc:	080002ba 	.word	0x080002ba
 80001c0:	080002ba 	.word	0x080002ba
 80001c4:	080002ba 	.word	0x080002ba
 80001c8:	080002ba 	.word	0x080002ba
 80001cc:	080002ba 	.word	0x080002ba
 80001d0:	080002ba 	.word	0x080002ba
 80001d4:	080002ba 	.word	0x080002ba
 80001d8:	080002ba 	.word	0x080002ba
 80001dc:	080002ba 	.word	0x080002ba

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f001 fa54 	bl	80016b0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f000 fbe2 	bl	80009d0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f001 f9e6 	bl	8001620 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f001 fa24 	bl	80016a0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f001 fcd2 	bl	8001c10 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f001 ba08 	b.w	8001690 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000294:	08002a58 	.word	0x08002a58
                ldr     r2, =_data_start
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800029c:	20000804 	.word	0x20000804
                ldr     r1, =_bss_start
 80002a0:	20000808 	.word	0x20000808
                ldr     r2, =_bss_end
 80002a4:	20000f70 	.word	0x20000f70
                ldr     r4, =__init_array_start
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f000 fb50 	bl	8000980 <chThdExit>

080002e0 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e0:	f000 fa3e 	bl	8000760 <chSchDoReschedule>

080002e4 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e4:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e6:	e7fe      	b.n	80002e6 <_port_exit_from_isr+0x2>

080002e8 <memcpy>:
 80002e8:	e352000f 	cmp	r2, #15
 80002ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 80002f0:	9a000029 	bls	800039c <memcpy+0xb4>
 80002f4:	e1813000 	orr	r3, r1, r0
 80002f8:	e3130003 	tst	r3, #3
 80002fc:	1a000031 	bne	80003c8 <memcpy+0xe0>
 8000300:	e1a0e002 	mov	lr, r2
 8000304:	e280c010 	add	ip, r0, #16
 8000308:	e2813010 	add	r3, r1, #16
 800030c:	e5137010 	ldr	r7, [r3, #-16]
 8000310:	e513600c 	ldr	r6, [r3, #-12]
 8000314:	e5135008 	ldr	r5, [r3, #-8]
 8000318:	e5134004 	ldr	r4, [r3, #-4]
 800031c:	e24ee010 	sub	lr, lr, #16
 8000320:	e35e000f 	cmp	lr, #15
 8000324:	e50c7010 	str	r7, [ip, #-16]
 8000328:	e50c600c 	str	r6, [ip, #-12]
 800032c:	e50c5008 	str	r5, [ip, #-8]
 8000330:	e50c4004 	str	r4, [ip, #-4]
 8000334:	e2833010 	add	r3, r3, #16
 8000338:	e28cc010 	add	ip, ip, #16
 800033c:	8afffff2 	bhi	800030c <memcpy+0x24>
 8000340:	e2423010 	sub	r3, r2, #16
 8000344:	e3c3300f 	bic	r3, r3, #15
 8000348:	e202600f 	and	r6, r2, #15
 800034c:	e2833010 	add	r3, r3, #16
 8000350:	e3560003 	cmp	r6, #3
 8000354:	e0811003 	add	r1, r1, r3
 8000358:	e0803003 	add	r3, r0, r3
 800035c:	9a00001b 	bls	80003d0 <memcpy+0xe8>
 8000360:	e1a04001 	mov	r4, r1
 8000364:	e1a0c006 	mov	ip, r6
 8000368:	e243e004 	sub	lr, r3, #4
 800036c:	e24cc004 	sub	ip, ip, #4
 8000370:	e4945004 	ldr	r5, [r4], #4
 8000374:	e35c0003 	cmp	ip, #3
 8000378:	e5ae5004 	str	r5, [lr, #4]!
 800037c:	8afffffa 	bhi	800036c <memcpy+0x84>
 8000380:	e246c004 	sub	ip, r6, #4
 8000384:	e3ccc003 	bic	ip, ip, #3
 8000388:	e28cc004 	add	ip, ip, #4
 800038c:	e083300c 	add	r3, r3, ip
 8000390:	e081100c 	add	r1, r1, ip
 8000394:	e2022003 	and	r2, r2, #3
 8000398:	ea000000 	b	80003a0 <memcpy+0xb8>
 800039c:	e1a03000 	mov	r3, r0
 80003a0:	e3520000 	cmp	r2, #0
 80003a4:	0a000005 	beq	80003c0 <memcpy+0xd8>
 80003a8:	e2433001 	sub	r3, r3, #1
 80003ac:	e0812002 	add	r2, r1, r2
 80003b0:	e4d1c001 	ldrb	ip, [r1], #1
 80003b4:	e1510002 	cmp	r1, r2
 80003b8:	e5e3c001 	strb	ip, [r3, #1]!
 80003bc:	1afffffb 	bne	80003b0 <memcpy+0xc8>
 80003c0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
 80003c4:	e12fff1e 	bx	lr
 80003c8:	e1a03000 	mov	r3, r0
 80003cc:	eafffff5 	b	80003a8 <memcpy+0xc0>
 80003d0:	e1a02006 	mov	r2, r6
 80003d4:	eafffff1 	b	80003a0 <memcpy+0xb8>
	...

080003e0 <wakeup>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80003e0:	2320      	movs	r3, #32
 80003e2:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80003e6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80003ea:	2b07      	cmp	r3, #7
 80003ec:	d80e      	bhi.n	800040c <wakeup+0x2c>
 80003ee:	e8df f003 	tbb	[pc, r3]
 80003f2:	0d28      	.short	0x0d28
 80003f4:	0408240d 	.word	0x0408240d
 80003f8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80003fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80003fc:	6893      	ldr	r3, [r2, #8]
 80003fe:	3301      	adds	r3, #1
 8000400:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000402:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000406:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000408:	6802      	ldr	r2, [r0, #0]
 800040a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800040c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800040e:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8000410:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000414:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000418:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800041a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800041e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000420:	689a      	ldr	r2, [r3, #8]
 8000422:	428a      	cmp	r2, r1
 8000424:	d2fb      	bcs.n	800041e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8000426:	685a      	ldr	r2, [r3, #4]
 8000428:	6042      	str	r2, [r0, #4]
  tp->queue.next             = cp;
 800042a:	6003      	str	r3, [r0, #0]
 800042c:	2100      	movs	r1, #0
  tp->queue.prev->queue.next = tp;
 800042e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000430:	6058      	str	r0, [r3, #4]
 8000432:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000436:	bc10      	pop	{r4}
 8000438:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800043a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	e7e4      	b.n	800040c <wakeup+0x2c>
 8000442:	2300      	movs	r3, #0
 8000444:	f383 8811 	msr	BASEPRI, r3
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	20000ef8 	.word	0x20000ef8

08000450 <_idle_thread.lto_priv.38>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000450:	e7fe      	b.n	8000450 <_idle_thread.lto_priv.38>
 8000452:	bf00      	nop
	...

08000460 <notify2.lto_priv.36>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8000460:	4a02      	ldr	r2, [pc, #8]	; (800046c <notify2.lto_priv.36+0xc>)
 8000462:	68d3      	ldr	r3, [r2, #12]
 8000464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000468:	60d3      	str	r3, [r2, #12]
 800046a:	4770      	bx	lr
 800046c:	40004400 	.word	0x40004400

08000470 <_ctl.lto_priv.47>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000470:	2000      	movs	r0, #0
 8000472:	4770      	bx	lr
	...

08000480 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	4604      	mov	r4, r0
 8000484:	460f      	mov	r7, r1
 8000486:	4616      	mov	r6, r2
 8000488:	2320      	movs	r3, #32
 800048a:	f383 8811 	msr	BASEPRI, r3
 800048e:	e003      	b.n	8000498 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8000490:	f001 fefe 	bl	8002290 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000494:	2800      	cmp	r0, #0
 8000496:	db19      	blt.n	80004cc <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 8000498:	68a5      	ldr	r5, [r4, #8]
 800049a:	4631      	mov	r1, r6
 800049c:	4620      	mov	r0, r4
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0f6      	beq.n	8000490 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80004a2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80004a4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80004a6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80004a8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80004aa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80004ac:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80004ae:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80004b0:	6923      	ldr	r3, [r4, #16]
 80004b2:	6962      	ldr	r2, [r4, #20]
 80004b4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80004b6:	bf24      	itt	cs
 80004b8:	68e3      	ldrcs	r3, [r4, #12]
 80004ba:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80004bc:	69e3      	ldr	r3, [r4, #28]
 80004be:	b10b      	cbz	r3, 80004c4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 80004c0:	4620      	mov	r0, r4
 80004c2:	4798      	blx	r3
 80004c4:	2000      	movs	r0, #0
 80004c6:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 80004ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004cc:	f385 8811 	msr	BASEPRI, r5
 80004d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d2:	bf00      	nop
	...

080004e0 <_putt.lto_priv.43>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80004e0:	3030      	adds	r0, #48	; 0x30
 80004e2:	f7ff bfcd 	b.w	8000480 <oqPutTimeout>
 80004e6:	bf00      	nop
	...

080004f0 <_put.lto_priv.41>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80004f0:	3030      	adds	r0, #48	; 0x30
 80004f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004f6:	f7ff bfc3 	b.w	8000480 <oqPutTimeout>
 80004fa:	bf00      	nop
 80004fc:	0000      	movs	r0, r0
	...

08000500 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	2320      	movs	r3, #32
 8000504:	4604      	mov	r4, r0
 8000506:	460e      	mov	r6, r1
 8000508:	f383 8811 	msr	BASEPRI, r3
 800050c:	e003      	b.n	8000516 <iqGetTimeout+0x16>
 800050e:	f001 febf 	bl	8002290 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000512:	2800      	cmp	r0, #0
 8000514:	db1a      	blt.n	800054c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8000516:	68a5      	ldr	r5, [r4, #8]
 8000518:	4631      	mov	r1, r6
 800051a:	4620      	mov	r0, r4
 800051c:	2d00      	cmp	r5, #0
 800051e:	d0f6      	beq.n	800050e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8000520:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8000522:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000524:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8000526:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8000528:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800052a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800052c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800052e:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8000530:	bf28      	it	cs
 8000532:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8000534:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000536:	bf28      	it	cs
 8000538:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800053a:	69e3      	ldr	r3, [r4, #28]
 800053c:	b10b      	cbz	r3, 8000542 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800053e:	4620      	mov	r0, r4
 8000540:	4798      	blx	r3
 8000542:	2300      	movs	r3, #0
 8000544:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8000548:	4628      	mov	r0, r5
}
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	f385 8811 	msr	BASEPRI, r5
 8000550:	bd70      	pop	{r4, r5, r6, pc}
 8000552:	bf00      	nop
	...

08000560 <_gett.lto_priv.44>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000560:	300c      	adds	r0, #12
 8000562:	f7ff bfcd 	b.w	8000500 <iqGetTimeout>
 8000566:	bf00      	nop
	...

08000570 <_get.lto_priv.42>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000570:	300c      	adds	r0, #12
 8000572:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000576:	f7ff bfc3 	b.w	8000500 <iqGetTimeout>
 800057a:	bf00      	nop
 800057c:	0000      	movs	r0, r0
	...

08000580 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000584:	b083      	sub	sp, #12
 8000586:	4617      	mov	r7, r2
 8000588:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800058a:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800058e:	f04f 0b20 	mov.w	fp, #32
 8000592:	f38b 8811 	msr	BASEPRI, fp

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 8000596:	2a00      	cmp	r2, #0
 8000598:	d051      	beq.n	800063e <oqWriteTimeout+0xbe>
 800059a:	4604      	mov	r4, r0
 800059c:	460e      	mov	r6, r1
 800059e:	f04f 0800 	mov.w	r8, #0
 80005a2:	e017      	b.n	80005d4 <oqWriteTimeout+0x54>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80005a4:	462a      	mov	r2, r5
 80005a6:	4631      	mov	r1, r6
 80005a8:	f7ff fe9e 	bl	80002e8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80005ac:	68e3      	ldr	r3, [r4, #12]
 80005ae:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80005b0:	68a3      	ldr	r3, [r4, #8]
 80005b2:	1b5b      	subs	r3, r3, r5
 80005b4:	60a3      	str	r3, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 80005b6:	b36d      	cbz	r5, 8000614 <oqWriteTimeout+0x94>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80005b8:	f1ba 0f00 	cmp.w	sl, #0
 80005bc:	d001      	beq.n	80005c2 <oqWriteTimeout+0x42>
        nfy(oqp);
 80005be:	4620      	mov	r0, r4
 80005c0:	47d0      	blx	sl
 80005c2:	2300      	movs	r3, #0
 80005c4:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 80005c8:	44a8      	add	r8, r5
      bp += done;
 80005ca:	442e      	add	r6, r5
 80005cc:	f38b 8811 	msr	BASEPRI, fp
  while (wr < n) {
 80005d0:	4547      	cmp	r7, r8
 80005d2:	d925      	bls.n	8000620 <oqWriteTimeout+0xa0>
  if (n > oqGetEmptyI(oqp)) {
 80005d4:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80005d6:	6960      	ldr	r0, [r4, #20]
  if (n > oqGetEmptyI(oqp)) {
 80005d8:	429f      	cmp	r7, r3
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80005da:	6923      	ldr	r3, [r4, #16]
    n = oqGetEmptyI(oqp);
 80005dc:	bf8c      	ite	hi
 80005de:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 80005e0:	463d      	movls	r5, r7
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80005e2:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d822      	bhi.n	800062e <oqWriteTimeout+0xae>
  else if (n > s1) {
 80005e8:	d2dc      	bcs.n	80005a4 <oqWriteTimeout+0x24>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80005ea:	461a      	mov	r2, r3
 80005ec:	4631      	mov	r1, r6
    s2 = n - s1;
 80005ee:	eba5 0903 	sub.w	r9, r5, r3
 80005f2:	9300      	str	r3, [sp, #0]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80005f4:	f7ff fe78 	bl	80002e8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80005f8:	9b00      	ldr	r3, [sp, #0]
 80005fa:	68e0      	ldr	r0, [r4, #12]
 80005fc:	18f1      	adds	r1, r6, r3
 80005fe:	464a      	mov	r2, r9
 8000600:	f7ff fe72 	bl	80002e8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000604:	68e3      	ldr	r3, [r4, #12]
 8000606:	444b      	add	r3, r9
 8000608:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 800060a:	68a3      	ldr	r3, [r4, #8]
 800060c:	1b5b      	subs	r3, r3, r5
 800060e:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8000610:	2d00      	cmp	r5, #0
 8000612:	d1d1      	bne.n	80005b8 <oqWriteTimeout+0x38>
 8000614:	9901      	ldr	r1, [sp, #4]
 8000616:	4620      	mov	r0, r4
 8000618:	f001 fe3a 	bl	8002290 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800061c:	2800      	cmp	r0, #0
 800061e:	d0d7      	beq.n	80005d0 <oqWriteTimeout+0x50>
 8000620:	2300      	movs	r3, #0
 8000622:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return wr;
}
 8000626:	4640      	mov	r0, r8
 8000628:	b003      	add	sp, #12
 800062a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800062e:	462a      	mov	r2, r5
 8000630:	4631      	mov	r1, r6
 8000632:	f7ff fe59 	bl	80002e8 <memcpy>
    oqp->q_wrptr += n;
 8000636:	6963      	ldr	r3, [r4, #20]
 8000638:	442b      	add	r3, r5
 800063a:	6163      	str	r3, [r4, #20]
 800063c:	e7b8      	b.n	80005b0 <oqWriteTimeout+0x30>
  size_t wr = 0;
 800063e:	4690      	mov	r8, r2
 8000640:	e7ee      	b.n	8000620 <oqWriteTimeout+0xa0>
 8000642:	bf00      	nop
	...

08000650 <_writet.lto_priv.45>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000650:	3030      	adds	r0, #48	; 0x30
 8000652:	f7ff bf95 	b.w	8000580 <oqWriteTimeout>
 8000656:	bf00      	nop
	...

08000660 <_write.lto_priv.39>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000660:	3030      	adds	r0, #48	; 0x30
 8000662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000666:	f7ff bf8b 	b.w	8000580 <oqWriteTimeout>
 800066a:	bf00      	nop
 800066c:	0000      	movs	r0, r0
	...

08000670 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8000670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000674:	b083      	sub	sp, #12
 8000676:	4617      	mov	r7, r2
 8000678:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = iqp->q_notify;
 800067a:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800067e:	f04f 0b20 	mov.w	fp, #32
 8000682:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
 8000686:	2a00      	cmp	r2, #0
 8000688:	d051      	beq.n	800072e <iqReadTimeout+0xbe>
 800068a:	4604      	mov	r4, r0
 800068c:	460e      	mov	r6, r1
 800068e:	f04f 0800 	mov.w	r8, #0
 8000692:	e017      	b.n	80006c4 <iqReadTimeout+0x54>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000694:	462a      	mov	r2, r5
 8000696:	4630      	mov	r0, r6
 8000698:	f7ff fe26 	bl	80002e8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800069c:	68e3      	ldr	r3, [r4, #12]
 800069e:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80006a0:	68a3      	ldr	r3, [r4, #8]
 80006a2:	1b5b      	subs	r3, r3, r5
 80006a4:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 80006a6:	b36d      	cbz	r5, 8000704 <iqReadTimeout+0x94>
      if (nfy != NULL) {
 80006a8:	f1ba 0f00 	cmp.w	sl, #0
 80006ac:	d001      	beq.n	80006b2 <iqReadTimeout+0x42>
        nfy(iqp);
 80006ae:	4620      	mov	r0, r4
 80006b0:	47d0      	blx	sl
 80006b2:	2300      	movs	r3, #0
 80006b4:	f383 8811 	msr	BASEPRI, r3
      rd += done;
 80006b8:	44a8      	add	r8, r5
      bp += done;
 80006ba:	442e      	add	r6, r5
 80006bc:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
 80006c0:	4547      	cmp	r7, r8
 80006c2:	d925      	bls.n	8000710 <iqReadTimeout+0xa0>
  if (n > iqGetFullI(iqp)) {
 80006c4:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80006c6:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80006c8:	429f      	cmp	r7, r3
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80006ca:	6923      	ldr	r3, [r4, #16]
    n = iqGetFullI(iqp);
 80006cc:	bf8c      	ite	hi
 80006ce:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 80006d0:	463d      	movls	r5, r7
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80006d2:	1a5b      	subs	r3, r3, r1
  if (n < s1) {
 80006d4:	42ab      	cmp	r3, r5
 80006d6:	d822      	bhi.n	800071e <iqReadTimeout+0xae>
  else if (n > s1) {
 80006d8:	d2dc      	bcs.n	8000694 <iqReadTimeout+0x24>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80006da:	461a      	mov	r2, r3
 80006dc:	4630      	mov	r0, r6
    s2 = n - s1;
 80006de:	eba5 0903 	sub.w	r9, r5, r3
 80006e2:	9300      	str	r3, [sp, #0]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80006e4:	f7ff fe00 	bl	80002e8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80006e8:	9b00      	ldr	r3, [sp, #0]
 80006ea:	68e1      	ldr	r1, [r4, #12]
 80006ec:	18f0      	adds	r0, r6, r3
 80006ee:	464a      	mov	r2, r9
 80006f0:	f7ff fdfa 	bl	80002e8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80006f4:	68e3      	ldr	r3, [r4, #12]
 80006f6:	444b      	add	r3, r9
 80006f8:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80006fa:	68a3      	ldr	r3, [r4, #8]
 80006fc:	1b5b      	subs	r3, r3, r5
 80006fe:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8000700:	2d00      	cmp	r5, #0
 8000702:	d1d1      	bne.n	80006a8 <iqReadTimeout+0x38>
 8000704:	9901      	ldr	r1, [sp, #4]
 8000706:	4620      	mov	r0, r4
 8000708:	f001 fdc2 	bl	8002290 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800070c:	2800      	cmp	r0, #0
 800070e:	d0d7      	beq.n	80006c0 <iqReadTimeout+0x50>
 8000710:	2300      	movs	r3, #0
 8000712:	f383 8811 	msr	BASEPRI, r3
}
 8000716:	4640      	mov	r0, r8
 8000718:	b003      	add	sp, #12
 800071a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800071e:	462a      	mov	r2, r5
 8000720:	4630      	mov	r0, r6
 8000722:	f7ff fde1 	bl	80002e8 <memcpy>
    iqp->q_rdptr += n;
 8000726:	69a3      	ldr	r3, [r4, #24]
 8000728:	442b      	add	r3, r5
 800072a:	61a3      	str	r3, [r4, #24]
 800072c:	e7b8      	b.n	80006a0 <iqReadTimeout+0x30>
  size_t rd = 0;
 800072e:	4690      	mov	r8, r2
 8000730:	e7ee      	b.n	8000710 <iqReadTimeout+0xa0>
 8000732:	bf00      	nop
	...

08000740 <_readt.lto_priv.46>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000740:	300c      	adds	r0, #12
 8000742:	f7ff bf95 	b.w	8000670 <iqReadTimeout>
 8000746:	bf00      	nop
	...

08000750 <_read.lto_priv.40>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000750:	300c      	adds	r0, #12
 8000752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000756:	f7ff bf8b 	b.w	8000670 <iqReadTimeout>
 800075a:	bf00      	nop
 800075c:	0000      	movs	r0, r0
	...

08000760 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8000762:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 8000764:	6803      	ldr	r3, [r0, #0]
void chSchDoReschedule(void) {
 8000766:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000768:	2101      	movs	r1, #1
  thread_t *otp = currp;
 800076a:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 800076c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800076e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8000770:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8000774:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8000776:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000778:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800077a:	f884 5020 	strb.w	r5, [r4, #32]
 800077e:	e000      	b.n	8000782 <chSchDoReschedule+0x22>
 8000780:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8000782:	689a      	ldr	r2, [r3, #8]
 8000784:	4291      	cmp	r1, r2
 8000786:	d3fb      	bcc.n	8000780 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 800078c:	6023      	str	r3, [r4, #0]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800078e:	4621      	mov	r1, r4
  tp->queue.prev->queue.next = tp;
 8000790:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000792:	605c      	str	r4, [r3, #4]
}
 8000794:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8000796:	f7ff bd93 	b.w	80002c0 <_port_switch>
 800079a:	bf00      	nop
 800079c:	20000ef8 	.word	0x20000ef8

080007a0 <chSchWakeupS>:
  thread_t *otp = currp;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80007a2:	b470      	push	{r4, r5, r6}
 80007a4:	4604      	mov	r4, r0
  thread_t *otp = currp;
 80007a6:	699d      	ldr	r5, [r3, #24]
  ntp->u.rdymsg = msg;
 80007a8:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80007aa:	68a8      	ldr	r0, [r5, #8]
 80007ac:	68a1      	ldr	r1, [r4, #8]
 80007ae:	4281      	cmp	r1, r0
  tp->state = CH_STATE_READY;
 80007b0:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 80007b4:	d80c      	bhi.n	80007d0 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 80007b6:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80007ba:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	4291      	cmp	r1, r2
 80007c0:	d9fb      	bls.n	80007ba <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 80007c6:	6023      	str	r3, [r4, #0]
  tp->queue.prev->queue.next = tp;
 80007c8:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80007ca:	605c      	str	r4, [r3, #4]
}
 80007cc:	bc70      	pop	{r4, r5, r6}
 80007ce:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80007d0:	f885 2020 	strb.w	r2, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80007d4:	461a      	mov	r2, r3
    cp = cp->queue.next;
 80007d6:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80007d8:	6891      	ldr	r1, [r2, #8]
 80007da:	4288      	cmp	r0, r1
 80007dc:	d9fb      	bls.n	80007d6 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 80007de:	6850      	ldr	r0, [r2, #4]
 80007e0:	6068      	str	r0, [r5, #4]
    ntp->state = CH_STATE_CURRENT;
 80007e2:	2601      	movs	r6, #1
  tp->queue.next             = cp;
 80007e4:	602a      	str	r2, [r5, #0]
  tp->queue.prev->queue.next = tp;
 80007e6:	6005      	str	r5, [r0, #0]
  cp->queue.prev             = tp;
 80007e8:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80007ea:	f884 6020 	strb.w	r6, [r4, #32]
    chSysSwitch(ntp, otp);
 80007ee:	4629      	mov	r1, r5
 80007f0:	4620      	mov	r0, r4
    currp = ntp;
 80007f2:	619c      	str	r4, [r3, #24]
}
 80007f4:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 80007f6:	f7ff bd63 	b.w	80002c0 <_port_switch>
 80007fa:	bf00      	nop
 80007fc:	20000ef8 	.word	0x20000ef8

08000800 <chSchGoSleepS>:
  thread_t *otp = currp;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <chSchGoSleepS+0x24>)
 8000802:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8000804:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000806:	b410      	push	{r4}
  otp->state = newstate;
 8000808:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800080c:	6810      	ldr	r0, [r2, #0]
 800080e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8000810:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000812:	6043      	str	r3, [r0, #4]
 8000814:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8000818:	4610      	mov	r0, r2
}
 800081a:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800081c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800081e:	f7ff bd4f 	b.w	80002c0 <_port_switch>
 8000822:	bf00      	nop
 8000824:	20000ef8 	.word	0x20000ef8
	...

08000830 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8000832:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000834:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8000836:	d04c      	beq.n	80008d2 <chSchGoSleepTimeoutS+0xa2>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000838:	4c41      	ldr	r4, [pc, #260]	; (8000940 <chSchGoSleepTimeoutS+0x110>)
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800083a:	4625      	mov	r5, r4
  vtp->par = par;
 800083c:	69a3      	ldr	r3, [r4, #24]
 800083e:	9305      	str	r3, [sp, #20]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000840:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 8000844:	2902      	cmp	r1, #2
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000846:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 800084a:	4607      	mov	r7, r0
 800084c:	bf38      	it	cc
 800084e:	2102      	movcc	r1, #2
  vtp->func = vtfunc;
 8000850:	483c      	ldr	r0, [pc, #240]	; (8000944 <chSchGoSleepTimeoutS+0x114>)
 8000852:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 8000856:	9004      	str	r0, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000858:	42ab      	cmp	r3, r5
 800085a:	d05c      	beq.n	8000916 <chSchGoSleepTimeoutS+0xe6>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800085c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800085e:	1a12      	subs	r2, r2, r0

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000860:	1889      	adds	r1, r1, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000862:	689a      	ldr	r2, [r3, #8]
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000864:	d231      	bcs.n	80008ca <chSchGoSleepTimeoutS+0x9a>
      p = p->next;
    }
    else if (delta < p->delta) {
 8000866:	4291      	cmp	r1, r2
  return systime + (systime_t)interval;
 8000868:	bf3c      	itt	cc
 800086a:	1840      	addcc	r0, r0, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800086c:	f8ce 0034 	strcc.w	r0, [lr, #52]	; 0x34
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000870:	4291      	cmp	r1, r2
 8000872:	d904      	bls.n	800087e <chSchGoSleepTimeoutS+0x4e>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8000874:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8000876:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	428a      	cmp	r2, r1
 800087c:	d3fa      	bcc.n	8000874 <chSchGoSleepTimeoutS+0x44>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8000882:	ae01      	add	r6, sp, #4
  vtp->next = p;
 8000884:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8000886:	6016      	str	r6, [r2, #0]
  p->prev = vtp;
 8000888:	605e      	str	r6, [r3, #4]
  vtp->delta = delta;
 800088a:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 8000894:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000896:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000898:	4638      	mov	r0, r7
 800089a:	f7ff ffb1 	bl	8000800 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800089e:	9b04      	ldr	r3, [sp, #16]
 80008a0:	b17b      	cbz	r3, 80008c2 <chSchGoSleepTimeoutS+0x92>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80008a2:	69e3      	ldr	r3, [r4, #28]
 80008a4:	42b3      	cmp	r3, r6
 80008a6:	d01b      	beq.n	80008e0 <chSchGoSleepTimeoutS+0xb0>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80008a8:	9a02      	ldr	r2, [sp, #8]
 80008aa:	9b01      	ldr	r3, [sp, #4]
 80008ac:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80008ae:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 80008b0:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80008b2:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
 80008b4:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80008b6:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80008b8:	d003      	beq.n	80008c2 <chSchGoSleepTimeoutS+0x92>
      vtp->next->delta += vtp->delta;
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	9903      	ldr	r1, [sp, #12]
 80008be:	440a      	add	r2, r1
 80008c0:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 80008c2:	69a3      	ldr	r3, [r4, #24]
}
 80008c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80008c6:	b007      	add	sp, #28
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->next;
 80008ca:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 80008cc:	1a89      	subs	r1, r1, r2
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	e7ce      	b.n	8000870 <chSchGoSleepTimeoutS+0x40>
 80008d2:	4c1b      	ldr	r4, [pc, #108]	; (8000940 <chSchGoSleepTimeoutS+0x110>)
    chSchGoSleepS(newstate);
 80008d4:	f7ff ff94 	bl	8000800 <chSchGoSleepS>
  return currp->u.rdymsg;
 80008d8:	69a3      	ldr	r3, [r4, #24]
}
 80008da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80008dc:	b007      	add	sp, #28
 80008de:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80008e0:	9b01      	ldr	r3, [sp, #4]
 80008e2:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80008e4:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80008e6:	42ab      	cmp	r3, r5
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80008e8:	605d      	str	r5, [r3, #4]
  vtp->func = NULL;
 80008ea:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80008ec:	d024      	beq.n	8000938 <chSchGoSleepTimeoutS+0x108>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80008f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80008f4:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 80008f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80008fe:	1a5b      	subs	r3, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000900:	429a      	cmp	r2, r3
 8000902:	d9de      	bls.n	80008c2 <chSchGoSleepTimeoutS+0x92>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000904:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000906:	2801      	cmp	r0, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000908:	bf98      	it	ls
 800090a:	1c9a      	addls	r2, r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800090c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8000910:	440a      	add	r2, r1
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
 8000914:	e7d5      	b.n	80008c2 <chSchGoSleepTimeoutS+0x92>
      ch.vtlist.lasttime = now;
 8000916:	62a2      	str	r2, [r4, #40]	; 0x28
 8000918:	1888      	adds	r0, r1, r2
      ch.vtlist.next = vtp;
 800091a:	ae01      	add	r6, sp, #4
  STM32_ST_TIM->SR     = 0;
 800091c:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800091e:	2302      	movs	r3, #2
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8000920:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000922:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
 8000924:	9103      	str	r1, [sp, #12]
      ch.vtlist.next = vtp;
 8000926:	61e6      	str	r6, [r4, #28]
      ch.vtlist.prev = vtp;
 8000928:	6226      	str	r6, [r4, #32]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800092a:	f8ce 0034 	str.w	r0, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800092e:	f8ce 2010 	str.w	r2, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000932:	f8ce 300c 	str.w	r3, [lr, #12]
 8000936:	e7af      	b.n	8000898 <chSchGoSleepTimeoutS+0x68>
  STM32_ST_TIM->DIER = 0;
 8000938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	e7c0      	b.n	80008c2 <chSchGoSleepTimeoutS+0x92>
 8000940:	20000ef8 	.word	0x20000ef8
 8000944:	080003e1 	.word	0x080003e1
	...

08000950 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000950:	2200      	movs	r2, #0
 8000952:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <chSchReadyI+0x28>)
thread_t *chSchReadyI(thread_t *tp) {
 8000956:	b410      	push	{r4}
 8000958:	4604      	mov	r4, r0
  tp->state = CH_STATE_READY;
 800095a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800095e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	428a      	cmp	r2, r1
 8000964:	d2fb      	bcs.n	800095e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 800096a:	6023      	str	r3, [r4, #0]
}
 800096c:	4620      	mov	r0, r4
  tp->queue.prev->queue.next = tp;
 800096e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000970:	605c      	str	r4, [r3, #4]
}
 8000972:	bc10      	pop	{r4}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000ef8 	.word	0x20000ef8
 800097c:	00000000 	.word	0x00000000

08000980 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8000980:	b538      	push	{r3, r4, r5, lr}
 8000982:	2220      	movs	r2, #32
 8000984:	4603      	mov	r3, r0
 8000986:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800098a:	4a10      	ldr	r2, [pc, #64]	; (80009cc <chThdExit+0x4c>)
 800098c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800098e:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8000990:	6263      	str	r3, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8000992:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000996:	4285      	cmp	r5, r0
 8000998:	d006      	beq.n	80009a8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800099a:	6803      	ldr	r3, [r0, #0]
 800099c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800099e:	f7ff ffd7 	bl	8000950 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80009a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80009a4:	42a8      	cmp	r0, r5
 80009a6:	d1f8      	bne.n	800099a <chThdExit+0x1a>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 80009a8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80009ac:	b943      	cbnz	r3, 80009c0 <chThdExit+0x40>
 80009ae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80009b2:	079b      	lsls	r3, r3, #30
 80009b4:	d104      	bne.n	80009c0 <chThdExit+0x40>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 80009b6:	6963      	ldr	r3, [r4, #20]
 80009b8:	6922      	ldr	r2, [r4, #16]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	6922      	ldr	r2, [r4, #16]
 80009be:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80009c0:	200f      	movs	r0, #15
}
 80009c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80009c6:	f7ff bf1b 	b.w	8000800 <chSchGoSleepS>
 80009ca:	bf00      	nop
 80009cc:	20000ef8 	.word	0x20000ef8

080009d0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80009d0:	4a86      	ldr	r2, [pc, #536]	; (8000bec <__early_init+0x21c>)
  gpiop->OTYPER  = config->otyper;
 80009d2:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8000c20 <__early_init+0x250>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80009d6:	6911      	ldr	r1, [r2, #16]
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80009d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80009dc:	f240 19ff 	movw	r9, #511	; 0x1ff
 80009e0:	2300      	movs	r3, #0
 80009e2:	ea41 0109 	orr.w	r1, r1, r9
 80009e6:	6111      	str	r1, [r2, #16]
 80009e8:	6113      	str	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80009ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
 80009ec:	4f80      	ldr	r7, [pc, #512]	; (8000bf0 <__early_init+0x220>)
 80009ee:	4e81      	ldr	r6, [pc, #516]	; (8000bf4 <__early_init+0x224>)
 80009f0:	4d81      	ldr	r5, [pc, #516]	; (8000bf8 <__early_init+0x228>)
 80009f2:	f8df e230 	ldr.w	lr, [pc, #560]	; 8000c24 <__early_init+0x254>
 80009f6:	4c81      	ldr	r4, [pc, #516]	; (8000bfc <__early_init+0x22c>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80009f8:	ea41 0109 	orr.w	r1, r1, r9
 80009fc:	6311      	str	r1, [r2, #48]	; 0x30
 80009fe:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000a00:	ea41 0909 	orr.w	r9, r1, r9
 8000a04:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8000a08:	f46f 49a8 	mvn.w	r9, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8000a0c:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000a10:	f8cc 9008 	str.w	r9, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8000a14:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8000c28 <__early_init+0x258>
 8000a18:	f8cc 900c 	str.w	r9, [ip, #12]
  gpiop->ODR     = config->odr;
 8000a1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8000a20:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8000c2c <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 8000a24:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8000a28:	f8cc 9020 	str.w	r9, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8000a2c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8000c30 <__early_init+0x260>
 8000a30:	f8cc 9024 	str.w	r9, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a34:	f109 592a 	add.w	r9, r9, #713031680	; 0x2a800000
 8000a38:	f509 19b0 	add.w	r9, r9, #1441792	; 0x160000
 8000a3c:	f8cc 9000 	str.w	r9, [ip]
  gpiop->OTYPER  = config->otyper;
 8000a40:	f44f 7c10 	mov.w	ip, #576	; 0x240
 8000a44:	f8c7 c004 	str.w	ip, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 8000a4c:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8000c34 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 8000a50:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8000a52:	f8c7 c00c 	str.w	ip, [r7, #12]
  gpiop->AFRL    = config->afrl;
 8000a56:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 8000a5a:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8000a5c:	f8c7 c020 	str.w	ip, [r7, #32]
  gpiop->MODER   = config->moder;
 8000a60:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8000c38 <__early_init+0x268>
  gpiop->AFRH    = config->afrh;
 8000a64:	f04f 0840 	mov.w	r8, #64	; 0x40
 8000a68:	f8c7 8024 	str.w	r8, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a6c:	f8c7 c000 	str.w	ip, [r7]
  gpiop->PUPDR   = config->pupdr;
 8000a70:	f10c 4caa 	add.w	ip, ip, #1426063360	; 0x55000000
 8000a74:	f5ac 0c43 	sub.w	ip, ip, #12779520	; 0xc30000
 8000a78:	f6ac 3c2c 	subw	ip, ip, #2860	; 0xb2c
  gpiop->OTYPER  = config->otyper;
 8000a7c:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000a7e:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8000a80:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->AFRL    = config->afrl;
 8000a84:	f04f 4cc0 	mov.w	ip, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8000a88:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8000a8a:	f8c6 c020 	str.w	ip, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8000a8e:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000c3c <__early_init+0x26c>
 8000a92:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a96:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000c40 <__early_init+0x270>
 8000a9a:	f8c6 c000 	str.w	ip, [r6]
  gpiop->PUPDR   = config->pupdr;
 8000a9e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000c44 <__early_init+0x274>
  gpiop->OTYPER  = config->otyper;
 8000aa2:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000aa4:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8000aa6:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
 8000aaa:	f640 7cff 	movw	ip, #4095	; 0xfff
 8000aae:	f8c5 c014 	str.w	ip, [r5, #20]
  gpiop->OTYPER  = config->otyper;
 8000ab2:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
  gpiop->MODER   = config->moder;
 8000ab6:	f8df c190 	ldr.w	ip, [pc, #400]	; 8000c48 <__early_init+0x278>
  gpiop->AFRL    = config->afrl;
 8000aba:	622b      	str	r3, [r5, #32]
  gpiop->OTYPER  = config->otyper;
 8000abc:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
  gpiop->AFRH    = config->afrh;
 8000ac0:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000ac2:	f8c5 c000 	str.w	ip, [r5]
  gpiop->OTYPER  = config->otyper;
 8000ac6:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000aca:	f8df c138 	ldr.w	ip, [pc, #312]	; 8000c04 <__early_init+0x234>
 8000ace:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000ad2:	f8ce 0008 	str.w	r0, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8000ad6:	f8ce 300c 	str.w	r3, [lr, #12]
  gpiop->ODR     = config->odr;
 8000ada:	f8ce 1014 	str.w	r1, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8000ade:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8000ae2:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000ae6:	f8ce 8000 	str.w	r8, [lr]
  gpiop->OTYPER  = config->otyper;
 8000aea:	607b      	str	r3, [r7, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000aec:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8000af0:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8000af2:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8000af4:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8000af6:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000afa:	603b      	str	r3, [r7, #0]
  PWR->CR = STM32_VOS;
 8000afc:	f44f 4740 	mov.w	r7, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 8000b00:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000b02:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8000b04:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8000b06:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8000b08:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8000b0a:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000b0c:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8000b0e:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000b10:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8000b12:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8000b14:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8000b16:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8000b18:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000b1a:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8000b1c:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000b1e:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8000b20:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8000b22:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8000b24:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8000b26:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000b28:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b2a:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8000b2e:	f8cc 7000 	str.w	r7, [ip]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	0794      	lsls	r4, r2, #30
 8000b40:	d5fc      	bpl.n	8000b3c <__early_init+0x16c>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8000b42:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000b44:	4a29      	ldr	r2, [pc, #164]	; (8000bec <__early_init+0x21c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8000b46:	f021 0103 	bic.w	r1, r1, #3
 8000b4a:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000b4c:	6893      	ldr	r3, [r2, #8]
 8000b4e:	f013 030c 	ands.w	r3, r3, #12
 8000b52:	d1fb      	bne.n	8000b4c <__early_init+0x17c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000b54:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000b56:	4925      	ldr	r1, [pc, #148]	; (8000bec <__early_init+0x21c>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000b58:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8000b5c:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000b5e:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8000b60:	6813      	ldr	r3, [r2, #0]
 8000b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b66:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000b68:	680b      	ldr	r3, [r1, #0]
 8000b6a:	0398      	lsls	r0, r3, #14
 8000b6c:	d5fc      	bpl.n	8000b68 <__early_init+0x198>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000b6e:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <__early_init+0x21c>)
  RCC->CSR |= RCC_CSR_LSION;
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000b78:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000b7a:	0799      	lsls	r1, r3, #30
 8000b7c:	d5fc      	bpl.n	8000b78 <__early_init+0x1a8>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <__early_init+0x230>)
 8000b80:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000b82:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000b84:	491f      	ldr	r1, [pc, #124]	; (8000c04 <__early_init+0x234>)
  RCC->CR |= RCC_CR_PLLON;
 8000b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b8a:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000b8c:	684b      	ldr	r3, [r1, #4]
 8000b8e:	045a      	lsls	r2, r3, #17
 8000b90:	d5fc      	bpl.n	8000b8c <__early_init+0x1bc>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <__early_init+0x21c>)
 8000b94:	6813      	ldr	r3, [r2, #0]
 8000b96:	019b      	lsls	r3, r3, #6
 8000b98:	d5fc      	bpl.n	8000b94 <__early_init+0x1c4>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <__early_init+0x238>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000b9c:	491b      	ldr	r1, [pc, #108]	; (8000c0c <__early_init+0x23c>)
 8000b9e:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <__early_init+0x240>)
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d017      	beq.n	8000bd8 <__early_init+0x208>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <__early_init+0x244>)
 8000baa:	f240 7205 	movw	r2, #1797	; 0x705
 8000bae:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <__early_init+0x21c>)
 8000bb2:	6893      	ldr	r3, [r2, #8]
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000bba:	6893      	ldr	r3, [r2, #8]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d1fa      	bne.n	8000bba <__early_init+0x1ea>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8000bc4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bca:	6453      	str	r3, [r2, #68]	; 0x44
 8000bcc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8000bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd2:	6653      	str	r3, [r2, #100]	; 0x64
 8000bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <__early_init+0x248>)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <__early_init+0x24c>)
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d1e2      	bne.n	8000ba8 <__early_init+0x1d8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__early_init+0x244>)
 8000be4:	f240 1205 	movw	r2, #261	; 0x105
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e7e1      	b.n	8000bb0 <__early_init+0x1e0>
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	40020c00 	.word	0x40020c00
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	07405408 	.word	0x07405408
 8000c04:	40007000 	.word	0x40007000
 8000c08:	e0042000 	.word	0xe0042000
 8000c0c:	38889400 	.word	0x38889400
 8000c10:	20006411 	.word	0x20006411
 8000c14:	40023c00 	.word	0x40023c00
 8000c18:	e000ed00 	.word	0xe000ed00
 8000c1c:	410fc241 	.word	0x410fc241
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010054 	.word	0x40010054
 8000c2c:	55560000 	.word	0x55560000
 8000c30:	000aaa00 	.word	0x000aaa00
 8000c34:	55514515 	.word	0x55514515
 8000c38:	00082080 	.word	0x00082080
 8000c3c:	00060600 	.word	0x00060600
 8000c40:	02208001 	.word	0x02208001
 8000c44:	00555055 	.word	0x00555055
 8000c48:	55000100 	.word	0x55000100
 8000c4c:	00000000 	.word	0x00000000

08000c50 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8000c54:	4d6e      	ldr	r5, [pc, #440]	; (8000e10 <VectorD8+0x1c0>)
 8000c56:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000c58:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8000c5c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8000c5e:	05da      	lsls	r2, r3, #23
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000c60:	b082      	sub	sp, #8
  uint16_t sr = u->SR;
 8000c62:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8000c64:	f100 8083 	bmi.w	8000d6e <VectorD8+0x11e>
 8000c68:	2320      	movs	r3, #32
 8000c6a:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000c6e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000c72:	d04d      	beq.n	8000d10 <VectorD8+0xc0>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000c74:	4f67      	ldr	r7, [pc, #412]	; (8000e14 <VectorD8+0x1c4>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000c76:	f04f 0a00 	mov.w	sl, #0
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000c7a:	f107 0808 	add.w	r8, r7, #8
 8000c7e:	e007      	b.n	8000c90 <VectorD8+0x40>
    if (sr & USART_SR_RXNE)
 8000c80:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000c82:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000c84:	d41d      	bmi.n	8000cc2 <VectorD8+0x72>
    sr = u->SR;
 8000c86:	6834      	ldr	r4, [r6, #0]
 8000c88:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000c8a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000c8e:	d03f      	beq.n	8000d10 <VectorD8+0xc0>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000c90:	0723      	lsls	r3, r4, #28
 8000c92:	d0f5      	beq.n	8000c80 <VectorD8+0x30>
    sts |= SD_OVERRUN_ERROR;
 8000c94:	f014 0f08 	tst.w	r4, #8
 8000c98:	bf0c      	ite	eq
 8000c9a:	2100      	moveq	r1, #0
 8000c9c:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000c9e:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8000ca0:	bf48      	it	mi
 8000ca2:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000ca6:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000ca8:	bf48      	it	mi
 8000caa:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000cae:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000cb0:	bf48      	it	mi
 8000cb2:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	f001 fa9a 	bl	80021f0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8000cbc:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000cbe:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000cc0:	d5e1      	bpl.n	8000c86 <VectorD8+0x36>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000cc2:	696a      	ldr	r2, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000cc4:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d03d      	beq.n	8000d48 <VectorD8+0xf8>
  if (!iqIsFullI(iqp)) {
 8000ccc:	6a2a      	ldr	r2, [r5, #32]
 8000cce:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	d043      	beq.n	8000d5c <VectorD8+0x10c>
    iqp->q_counter++;
 8000cd4:	6969      	ldr	r1, [r5, #20]
 8000cd6:	4023      	ands	r3, r4
    *iqp->q_wrptr++ = b;
 8000cd8:	1c50      	adds	r0, r2, #1
    iqp->q_counter++;
 8000cda:	3101      	adds	r1, #1
    *iqp->q_wrptr++ = b;
 8000cdc:	6228      	str	r0, [r5, #32]
    iqp->q_counter++;
 8000cde:	6169      	str	r1, [r5, #20]
    *iqp->q_wrptr++ = b;
 8000ce0:	7013      	strb	r3, [r2, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000ce2:	6a2a      	ldr	r2, [r5, #32]
 8000ce4:	69eb      	ldr	r3, [r5, #28]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d301      	bcc.n	8000cee <VectorD8+0x9e>
      iqp->q_wrptr = iqp->q_buffer;
 8000cea:	69ab      	ldr	r3, [r5, #24]
 8000cec:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000cee:	68eb      	ldr	r3, [r5, #12]
 8000cf0:	4543      	cmp	r3, r8
 8000cf2:	d0c8      	beq.n	8000c86 <VectorD8+0x36>
  tqp->next             = tp->queue.next;
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 8000cf8:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8000cfa:	f8c2 8004 	str.w	r8, [r2, #4]
  tp->u.rdymsg = msg;
 8000cfe:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000d02:	f7ff fe25 	bl	8000950 <chSchReadyI>
    sr = u->SR;
 8000d06:	6834      	ldr	r4, [r6, #0]
 8000d08:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000d0a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000d0e:	d1bf      	bne.n	8000c90 <VectorD8+0x40>
 8000d10:	2300      	movs	r3, #0
 8000d12:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000d16:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000d1a:	d001      	beq.n	8000d20 <VectorD8+0xd0>
 8000d1c:	0622      	lsls	r2, r4, #24
 8000d1e:	d435      	bmi.n	8000d8c <VectorD8+0x13c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8000d20:	f019 0f40 	tst.w	r9, #64	; 0x40
 8000d24:	d00b      	beq.n	8000d3e <VectorD8+0xee>
 8000d26:	0663      	lsls	r3, r4, #25
 8000d28:	d509      	bpl.n	8000d3e <VectorD8+0xee>
 8000d2a:	2320      	movs	r3, #32
 8000d2c:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000d30:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000d32:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d04e      	beq.n	8000dd6 <VectorD8+0x186>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8000d3e:	b002      	add	sp, #8
 8000d40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8000d44:	f001 ba14 	b.w	8002170 <_port_irq_epilogue>
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	f001 fa4f 	bl	80021f0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8000d52:	6a2a      	ldr	r2, [r5, #32]
 8000d54:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	d1bb      	bne.n	8000cd4 <VectorD8+0x84>
 8000d5c:	6969      	ldr	r1, [r5, #20]
 8000d5e:	2900      	cmp	r1, #0
 8000d60:	d0b8      	beq.n	8000cd4 <VectorD8+0x84>
 8000d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d66:	4638      	mov	r0, r7
 8000d68:	f001 fa42 	bl	80021f0 <chEvtBroadcastFlagsI>
 8000d6c:	e78b      	b.n	8000c86 <VectorD8+0x36>
 8000d6e:	2320      	movs	r3, #32
 8000d70:	f383 8811 	msr	BASEPRI, r3
 8000d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d78:	1d28      	adds	r0, r5, #4
 8000d7a:	f001 fa39 	bl	80021f0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8000d7e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000d82:	6033      	str	r3, [r6, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	f383 8811 	msr	BASEPRI, r3
 8000d8a:	e76d      	b.n	8000c68 <VectorD8+0x18>
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8000d92:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d94:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d02a      	beq.n	8000df0 <VectorD8+0x1a0>
    oqp->q_counter++;
 8000d9a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8000d9c:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8000d9e:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8000da0:	3201      	adds	r2, #1
 8000da2:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8000da4:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8000da6:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8000da8:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000daa:	d301      	bcc.n	8000db0 <VectorD8+0x160>
      oqp->q_rdptr = oqp->q_buffer;
 8000dac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000dae:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000db0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <VectorD8+0x1c8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d009      	beq.n	8000dcc <VectorD8+0x17c>
  tqp->next             = tp->queue.next;
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	6329      	str	r1, [r5, #48]	; 0x30
  tp->u.rdymsg = msg;
 8000dbc:	f04f 0e00 	mov.w	lr, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000dc0:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8000dc2:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 8000dc4:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000dc8:	f7ff fdc2 	bl	8000950 <chSchReadyI>
      u->DR = b;
 8000dcc:	6077      	str	r7, [r6, #4]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f383 8811 	msr	BASEPRI, r3
 8000dd4:	e7a4      	b.n	8000d20 <VectorD8+0xd0>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000dd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0ad      	beq.n	8000d38 <VectorD8+0xe8>
 8000ddc:	2110      	movs	r1, #16
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <VectorD8+0x1c4>)
 8000de0:	f001 fa06 	bl	80021f0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000de4:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000de8:	ea09 0303 	and.w	r3, r9, r3
 8000dec:	60f3      	str	r3, [r6, #12]
 8000dee:	e7a3      	b.n	8000d38 <VectorD8+0xe8>
  if (!oqIsEmptyI(oqp)) {
 8000df0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d0d1      	beq.n	8000d9a <VectorD8+0x14a>
 8000df6:	2108      	movs	r1, #8
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <VectorD8+0x1c4>)
 8000dfa:	f001 f9f9 	bl	80021f0 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000dfe:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000e02:	ea09 0303 	and.w	r3, r9, r3
 8000e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e0a:	60f3      	str	r3, [r6, #12]
 8000e0c:	e7df      	b.n	8000dce <VectorD8+0x17e>
 8000e0e:	bf00      	nop
 8000e10:	20000e7c 	.word	0x20000e7c
 8000e14:	20000e80 	.word	0x20000e80
 8000e18:	20000eac 	.word	0x20000eac
 8000e1c:	00000000 	.word	0x00000000

08000e20 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000e24:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	079b      	lsls	r3, r3, #30
 8000e2c:	d403      	bmi.n	8000e36 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000e2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8000e32:	f001 b99d 	b.w	8002170 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8000e36:	2100      	movs	r1, #0
 8000e38:	6139      	str	r1, [r7, #16]
 8000e3a:	2320      	movs	r3, #32
 8000e3c:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8000e40:	4c1e      	ldr	r4, [pc, #120]	; (8000ebc <VectorB0+0x9c>)
 8000e42:	46a1      	mov	r9, r4
  return (systime_t)STM32_ST_TIM->CNT;
 8000e44:	46b8      	mov	r8, r7
 8000e46:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 8000e4a:	689a      	ldr	r2, [r3, #8]
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8000e4c:	460f      	mov	r7, r1
 8000e4e:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8000e52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8000e54:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8000e56:	4295      	cmp	r5, r2
 8000e58:	d31b      	bcc.n	8000e92 <VectorB0+0x72>
 8000e5a:	2620      	movs	r6, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000e5c:	6818      	ldr	r0, [r3, #0]
      fn = vtp->func;
 8000e5e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
      ch.vtlist.lasttime += vtp->delta;
 8000e62:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000e64:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8000e66:	62a1      	str	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8000e68:	eba5 0502 	sub.w	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000e6c:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8000e70:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 8000e72:	60df      	str	r7, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 8000e74:	bf08      	it	eq
 8000e76:	f8c8 700c 	streq.w	r7, [r8, #12]
 8000e7a:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8000e7e:	6918      	ldr	r0, [r3, #16]
 8000e80:	47d0      	blx	sl
 8000e82:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8000e86:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	4295      	cmp	r5, r2
 8000e8c:	d3df      	bcc.n	8000e4e <VectorB0+0x2e>
 8000e8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e90:	e7e4      	b.n	8000e5c <VectorB0+0x3c>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000e92:	69e2      	ldr	r2, [r4, #28]
 8000e94:	454a      	cmp	r2, r9
 8000e96:	d00a      	beq.n	8000eae <VectorB0+0x8e>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8000e98:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8000e9a:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8000e9c:	1b4d      	subs	r5, r1, r5
 8000e9e:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	bf2c      	ite	cs
 8000ea6:	18c0      	addcs	r0, r0, r3
 8000ea8:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000eaa:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f383 8811 	msr	BASEPRI, r3
}
 8000eb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8000eb8:	f001 b95a 	b.w	8002170 <_port_irq_epilogue>
 8000ebc:	20000ef8 	.word	0x20000ef8

08000ec0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8000ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000ec4:	f002 0a03 	and.w	sl, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000ec8:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000ecc:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8000ed0:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000ed4:	46d1      	mov	r9, sl
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000ed6:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 8000eda:	2700      	movs	r7, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000edc:	f04f 0b0f 	mov.w	fp, #15
 8000ee0:	e00f      	b.n	8000f02 <_pal_lld_setgroupmode+0x42>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000ee2:	6a03      	ldr	r3, [r0, #32]
 8000ee4:	ea23 0404 	bic.w	r4, r3, r4
 8000ee8:	4325      	orrs	r5, r4
 8000eea:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000eec:	0849      	lsrs	r1, r1, #1
 8000eee:	d039      	beq.n	8000f64 <_pal_lld_setgroupmode+0xa4>
      return;
    otyper <<= 1;
 8000ef0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 8000ef4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 8000ef8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 8000efc:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bit++;
 8000f00:	3701      	adds	r7, #1
    if ((mask & 1) != 0) {
 8000f02:	07cb      	lsls	r3, r1, #31
 8000f04:	d5f2      	bpl.n	8000eec <_pal_lld_setgroupmode+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000f06:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000f08:	2401      	movs	r4, #1
 8000f0a:	40bc      	lsls	r4, r7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000f0c:	ea23 0304 	bic.w	r3, r3, r4
 8000f10:	ea43 0308 	orr.w	r3, r3, r8
 8000f14:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 8000f16:	2503      	movs	r5, #3
 8000f18:	007b      	lsls	r3, r7, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000f1a:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 8000f1c:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000f20:	43db      	mvns	r3, r3
 8000f22:	401c      	ands	r4, r3
 8000f24:	ea44 040c 	orr.w	r4, r4, ip
 8000f28:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000f2a:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000f2c:	f007 0407 	and.w	r4, r7, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000f30:	401d      	ands	r5, r3
 8000f32:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 8000f36:	00a4      	lsls	r4, r4, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000f38:	f1ba 0f02 	cmp.w	sl, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000f3c:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000f3e:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
 8000f42:	fa0b f404 	lsl.w	r4, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000f46:	d00f      	beq.n	8000f68 <_pal_lld_setgroupmode+0xa8>
        port->MODER   = (port->MODER & ~m2) | moder;
 8000f48:	6806      	ldr	r6, [r0, #0]
 8000f4a:	4033      	ands	r3, r6
 8000f4c:	ea43 0309 	orr.w	r3, r3, r9
        if (bit < 8)
 8000f50:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000f52:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000f54:	d9c5      	bls.n	8000ee2 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000f56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f58:	ea23 0404 	bic.w	r4, r3, r4
 8000f5c:	4325      	orrs	r5, r4
    if (!mask)
 8000f5e:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000f60:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
 8000f62:	d1c5      	bne.n	8000ef0 <_pal_lld_setgroupmode+0x30>
 8000f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
 8000f68:	2f07      	cmp	r7, #7
 8000f6a:	d80a      	bhi.n	8000f82 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000f6c:	6a06      	ldr	r6, [r0, #32]
 8000f6e:	ea26 0404 	bic.w	r4, r6, r4
 8000f72:	4325      	orrs	r5, r4
 8000f74:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000f76:	6804      	ldr	r4, [r0, #0]
 8000f78:	4023      	ands	r3, r4
 8000f7a:	ea43 0309 	orr.w	r3, r3, r9
 8000f7e:	6003      	str	r3, [r0, #0]
 8000f80:	e7b4      	b.n	8000eec <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000f82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000f84:	ea26 0404 	bic.w	r4, r6, r4
 8000f88:	4325      	orrs	r5, r4
 8000f8a:	6245      	str	r5, [r0, #36]	; 0x24
 8000f8c:	e7f3      	b.n	8000f76 <_pal_lld_setgroupmode+0xb6>
 8000f8e:	bf00      	nop

08000f90 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8000f92:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000f94:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8000f96:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000f98:	0d89      	lsrs	r1, r1, #22
 8000f9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8000f9e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8000fa0:	058c      	lsls	r4, r1, #22
 8000fa2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8000fa4:	b10a      	cbz	r2, 8000faa <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8000fa6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8000fa8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000fae:	f001 b8df 	b.w	8002170 <_port_irq_epilogue>
 8000fb2:	bf00      	nop
 8000fb4:	40026400 	.word	0x40026400
 8000fb8:	200009d8 	.word	0x200009d8
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000fc4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8000fc6:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000fc8:	0c09      	lsrs	r1, r1, #16
 8000fca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8000fce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8000fd0:	040c      	lsls	r4, r1, #16
 8000fd2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8000fd4:	b10a      	cbz	r2, 8000fda <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8000fd6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8000fd8:	4790      	blx	r2
}
 8000fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000fde:	f001 b8c7 	b.w	8002170 <_port_irq_epilogue>
 8000fe2:	bf00      	nop
 8000fe4:	40026400 	.word	0x40026400
 8000fe8:	200009d8 	.word	0x200009d8
 8000fec:	00000000 	.word	0x00000000

08000ff0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ff4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 8000ff6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ff8:	0989      	lsrs	r1, r1, #6
 8000ffa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8000ffe:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8001000:	018c      	lsls	r4, r1, #6
 8001002:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8001004:	b10a      	cbz	r2, 800100a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8001006:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001008:	4790      	blx	r2
}
 800100a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800100e:	f001 b8af 	b.w	8002170 <_port_irq_epilogue>
 8001012:	bf00      	nop
 8001014:	40026400 	.word	0x40026400
 8001018:	200009d8 	.word	0x200009d8
 800101c:	00000000 	.word	0x00000000

08001020 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8001020:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001026:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 8001028:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800102a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800102e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8001030:	b10a      	cbz	r2, 8001036 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8001032:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001034:	4790      	blx	r2
}
 8001036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800103a:	f001 b899 	b.w	8002170 <_port_irq_epilogue>
 800103e:	bf00      	nop
 8001040:	40026400 	.word	0x40026400
 8001044:	200009d8 	.word	0x200009d8
	...

08001050 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001054:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8001056:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001058:	0d89      	lsrs	r1, r1, #22
 800105a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800105e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8001060:	058c      	lsls	r4, r1, #22
 8001062:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8001064:	b10a      	cbz	r2, 800106a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8001066:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001068:	4790      	blx	r2
}
 800106a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800106e:	f001 b87f 	b.w	8002170 <_port_irq_epilogue>
 8001072:	bf00      	nop
 8001074:	40026400 	.word	0x40026400
 8001078:	200009d8 	.word	0x200009d8
 800107c:	00000000 	.word	0x00000000

08001080 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001084:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 8001086:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001088:	0c09      	lsrs	r1, r1, #16
 800108a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800108e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8001090:	040c      	lsls	r4, r1, #16
 8001092:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8001094:	b10a      	cbz	r2, 800109a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8001096:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001098:	4790      	blx	r2
}
 800109a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800109e:	f001 b867 	b.w	8002170 <_port_irq_epilogue>
 80010a2:	bf00      	nop
 80010a4:	40026400 	.word	0x40026400
 80010a8:	200009d8 	.word	0x200009d8
 80010ac:	00000000 	.word	0x00000000

080010b0 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80010b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 80010b6:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80010b8:	0989      	lsrs	r1, r1, #6
 80010ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80010be:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 80010c0:	018c      	lsls	r4, r1, #6
 80010c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 80010c4:	b10a      	cbz	r2, 80010ca <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 80010c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80010c8:	4790      	blx	r2
}
 80010ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80010ce:	f001 b84f 	b.w	8002170 <_port_irq_epilogue>
 80010d2:	bf00      	nop
 80010d4:	40026400 	.word	0x40026400
 80010d8:	200009d8 	.word	0x200009d8
 80010dc:	00000000 	.word	0x00000000

080010e0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80010e0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80010e6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 80010e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80010ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80010ee:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 80010f0:	b10a      	cbz	r2, 80010f6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80010f2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80010f4:	4790      	blx	r2
}
 80010f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80010fa:	f001 b839 	b.w	8002170 <_port_irq_epilogue>
 80010fe:	bf00      	nop
 8001100:	40026400 	.word	0x40026400
 8001104:	200009d8 	.word	0x200009d8
	...

08001110 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001114:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 8001116:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001118:	0d89      	lsrs	r1, r1, #22
 800111a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800111e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8001120:	058c      	lsls	r4, r1, #22
 8001122:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8001124:	b10a      	cbz	r2, 800112a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8001126:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001128:	4790      	blx	r2
}
 800112a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800112e:	f001 b81f 	b.w	8002170 <_port_irq_epilogue>
 8001132:	bf00      	nop
 8001134:	40026000 	.word	0x40026000
 8001138:	200009d8 	.word	0x200009d8
 800113c:	00000000 	.word	0x00000000

08001140 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001144:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8001146:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001148:	0c09      	lsrs	r1, r1, #16
 800114a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800114e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8001150:	040c      	lsls	r4, r1, #16
 8001152:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8001154:	b10a      	cbz	r2, 800115a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8001156:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001158:	4790      	blx	r2
}
 800115a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800115e:	f001 b807 	b.w	8002170 <_port_irq_epilogue>
 8001162:	bf00      	nop
 8001164:	40026000 	.word	0x40026000
 8001168:	200009d8 	.word	0x200009d8
 800116c:	00000000 	.word	0x00000000

08001170 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001174:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8001176:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001178:	0989      	lsrs	r1, r1, #6
 800117a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800117e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8001180:	018c      	lsls	r4, r1, #6
 8001182:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8001184:	b10a      	cbz	r2, 800118a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8001186:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001188:	4790      	blx	r2
}
 800118a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800118e:	f000 bfef 	b.w	8002170 <_port_irq_epilogue>
 8001192:	bf00      	nop
 8001194:	40026000 	.word	0x40026000
 8001198:	200009d8 	.word	0x200009d8
 800119c:	00000000 	.word	0x00000000

080011a0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80011a0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80011a6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 80011a8:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80011aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80011ae:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 80011b0:	b10a      	cbz	r2, 80011b6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80011b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80011b4:	4790      	blx	r2
}
 80011b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80011ba:	f000 bfd9 	b.w	8002170 <_port_irq_epilogue>
 80011be:	bf00      	nop
 80011c0:	40026000 	.word	0x40026000
 80011c4:	200009d8 	.word	0x200009d8
	...

080011d0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80011d4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 80011d6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80011d8:	0d89      	lsrs	r1, r1, #22
 80011da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80011de:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 80011e0:	058c      	lsls	r4, r1, #22
 80011e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80011e4:	b10a      	cbz	r2, 80011ea <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80011e6:	69c0      	ldr	r0, [r0, #28]
 80011e8:	4790      	blx	r2
}
 80011ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80011ee:	f000 bfbf 	b.w	8002170 <_port_irq_epilogue>
 80011f2:	bf00      	nop
 80011f4:	40026000 	.word	0x40026000
 80011f8:	200009d8 	.word	0x200009d8
 80011fc:	00000000 	.word	0x00000000

08001200 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001204:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 8001206:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001208:	0c09      	lsrs	r1, r1, #16
 800120a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800120e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8001210:	040c      	lsls	r4, r1, #16
 8001212:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8001214:	b10a      	cbz	r2, 800121a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8001216:	6940      	ldr	r0, [r0, #20]
 8001218:	4790      	blx	r2
}
 800121a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800121e:	f000 bfa7 	b.w	8002170 <_port_irq_epilogue>
 8001222:	bf00      	nop
 8001224:	40026000 	.word	0x40026000
 8001228:	200009d8 	.word	0x200009d8
 800122c:	00000000 	.word	0x00000000

08001230 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001234:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 8001236:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001238:	0989      	lsrs	r1, r1, #6
 800123a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800123e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8001240:	018c      	lsls	r4, r1, #6
 8001242:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8001244:	b10a      	cbz	r2, 800124a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8001246:	68c0      	ldr	r0, [r0, #12]
 8001248:	4790      	blx	r2
}
 800124a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800124e:	f000 bf8f 	b.w	8002170 <_port_irq_epilogue>
 8001252:	bf00      	nop
 8001254:	40026000 	.word	0x40026000
 8001258:	200009d8 	.word	0x200009d8
 800125c:	00000000 	.word	0x00000000

08001260 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8001260:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001266:	6819      	ldr	r1, [r3, #0]
 8001268:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800126c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800126e:	6813      	ldr	r3, [r2, #0]
 8001270:	b10b      	cbz	r3, 8001276 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001272:	6850      	ldr	r0, [r2, #4]
 8001274:	4798      	blx	r3
}
 8001276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800127a:	f000 bf79 	b.w	8002170 <_port_irq_epilogue>
 800127e:	bf00      	nop
 8001280:	40026000 	.word	0x40026000
 8001284:	200009d8 	.word	0x200009d8
	...

08001290 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8001290:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8001292:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	6813      	ldr	r3, [r2, #0]
 8001298:	f023 031f 	bic.w	r3, r3, #31
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f013 0301 	ands.w	r3, r3, #1
 80012a4:	d1fb      	bne.n	800129e <adc_lld_stop_conversion+0xe>
 80012a6:	7a25      	ldrb	r5, [r4, #8]
  adcp->adc->CR1 = 0;
 80012a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 80012aa:	6860      	ldr	r0, [r4, #4]
 80012ac:	213d      	movs	r1, #61	; 0x3d
 80012ae:	40a9      	lsls	r1, r5
 80012b0:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
 80012b2:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80012b4:	6893      	ldr	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80012b6:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80012b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80012bc:	6093      	str	r3, [r2, #8]
}
 80012be:	bc30      	pop	{r4, r5}
  adcp->adc->CR2 = ADC_CR2_ADON;
 80012c0:	6091      	str	r1, [r2, #8]
}
 80012c2:	4770      	bx	lr
	...

080012d0 <adc_lld_serve_rx_interrupt.lto_priv.37>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80012d0:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 80012d4:	b570      	push	{r4, r5, r6, lr}
 80012d6:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80012d8:	d118      	bne.n	800130c <adc_lld_serve_rx_interrupt.lto_priv.37+0x3c>
    if (adcp->grpp != NULL) {
 80012da:	6903      	ldr	r3, [r0, #16]
 80012dc:	b1ab      	cbz	r3, 800130a <adc_lld_serve_rx_interrupt.lto_priv.37+0x3a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 80012de:	068d      	lsls	r5, r1, #26
 80012e0:	d511      	bpl.n	8001306 <adc_lld_serve_rx_interrupt.lto_priv.37+0x36>
        _adc_isr_full_code(adcp);
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d042      	beq.n	800136e <adc_lld_serve_rx_interrupt.lto_priv.37+0x9e>
 80012e8:	685d      	ldr	r5, [r3, #4]
 80012ea:	b175      	cbz	r5, 800130a <adc_lld_serve_rx_interrupt.lto_priv.37+0x3a>
 80012ec:	68c2      	ldr	r2, [r0, #12]
 80012ee:	2a01      	cmp	r2, #1
 80012f0:	d938      	bls.n	8001364 <adc_lld_serve_rx_interrupt.lto_priv.37+0x94>
 80012f2:	885e      	ldrh	r6, [r3, #2]
 80012f4:	6883      	ldr	r3, [r0, #8]
 80012f6:	0852      	lsrs	r2, r2, #1
 80012f8:	0051      	lsls	r1, r2, #1
 80012fa:	fb06 3101 	mla	r1, r6, r1, r3
 80012fe:	462b      	mov	r3, r5
}
 8001300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
 8001304:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001306:	06ca      	lsls	r2, r1, #27
 8001308:	d423      	bmi.n	8001352 <adc_lld_serve_rx_interrupt.lto_priv.37+0x82>
 800130a:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 800130c:	f7ff ffc0 	bl	8001290 <adc_lld_stop_conversion>
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d04a      	beq.n	80013ae <adc_lld_serve_rx_interrupt.lto_priv.37+0xde>
 8001318:	2205      	movs	r2, #5
 800131a:	7022      	strb	r2, [r4, #0]
 800131c:	2100      	movs	r1, #0
 800131e:	4620      	mov	r0, r4
 8001320:	4798      	blx	r3
 8001322:	7823      	ldrb	r3, [r4, #0]
 8001324:	2b05      	cmp	r3, #5
 8001326:	bf04      	itt	eq
 8001328:	2302      	moveq	r3, #2
 800132a:	7023      	strbeq	r3, [r4, #0]
 800132c:	2300      	movs	r3, #0
 800132e:	6123      	str	r3, [r4, #16]
 8001330:	2320      	movs	r3, #32
 8001332:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001336:	6963      	ldr	r3, [r4, #20]
 8001338:	b13b      	cbz	r3, 800134a <adc_lld_serve_rx_interrupt.lto_priv.37+0x7a>
    *trp = NULL;
 800133a:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 800133c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    *trp = NULL;
 8001340:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8001342:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001346:	f7ff fb03 	bl	8000950 <chSchReadyI>
 800134a:	2300      	movs	r3, #0
 800134c:	f383 8811 	msr	BASEPRI, r3
 8001350:	bd70      	pop	{r4, r5, r6, pc}
        _adc_isr_half_code(adcp);
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0d8      	beq.n	800130a <adc_lld_serve_rx_interrupt.lto_priv.37+0x3a>
 8001358:	68c2      	ldr	r2, [r0, #12]
 800135a:	6881      	ldr	r1, [r0, #8]
 800135c:	0852      	lsrs	r2, r2, #1
}
 800135e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
 8001362:	4718      	bx	r3
        _adc_isr_full_code(adcp);
 8001364:	462b      	mov	r3, r5
 8001366:	6881      	ldr	r1, [r0, #8]
}
 8001368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
 800136c:	4718      	bx	r3
 800136e:	f7ff ff8f 	bl	8001290 <adc_lld_stop_conversion>
 8001372:	6923      	ldr	r3, [r4, #16]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	b1ab      	cbz	r3, 80013a4 <adc_lld_serve_rx_interrupt.lto_priv.37+0xd4>
 8001378:	2204      	movs	r2, #4
 800137a:	7022      	strb	r2, [r4, #0]
 800137c:	68a1      	ldr	r1, [r4, #8]
 800137e:	68e2      	ldr	r2, [r4, #12]
 8001380:	4620      	mov	r0, r4
 8001382:	4798      	blx	r3
 8001384:	7823      	ldrb	r3, [r4, #0]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d00c      	beq.n	80013a4 <adc_lld_serve_rx_interrupt.lto_priv.37+0xd4>
 800138a:	2320      	movs	r3, #32
 800138c:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001390:	6963      	ldr	r3, [r4, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0d9      	beq.n	800134a <adc_lld_serve_rx_interrupt.lto_priv.37+0x7a>
    *trp = NULL;
 8001396:	2200      	movs	r2, #0
 8001398:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
 800139a:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800139e:	f7ff fad7 	bl	8000950 <chSchReadyI>
 80013a2:	e7d2      	b.n	800134a <adc_lld_serve_rx_interrupt.lto_priv.37+0x7a>
 80013a4:	2202      	movs	r2, #2
 80013a6:	2300      	movs	r3, #0
 80013a8:	7022      	strb	r2, [r4, #0]
 80013aa:	6123      	str	r3, [r4, #16]
 80013ac:	e7ed      	b.n	800138a <adc_lld_serve_rx_interrupt.lto_priv.37+0xba>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80013ae:	2202      	movs	r2, #2
 80013b0:	6123      	str	r3, [r4, #16]
 80013b2:	7022      	strb	r2, [r4, #0]
 80013b4:	e7bc      	b.n	8001330 <adc_lld_serve_rx_interrupt.lto_priv.37+0x60>
 80013b6:	bf00      	nop
	...

080013c0 <Vector88>:
  sr = ADC1->SR;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <Vector88+0x74>)
 80013c2:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 80013c4:	2100      	movs	r1, #0
 80013c6:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 80013c8:	0693      	lsls	r3, r2, #26
 80013ca:	d52c      	bpl.n	8001426 <Vector88+0x66>
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 80013cc:	b510      	push	{r4, lr}
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 80013ce:	4c1a      	ldr	r4, [pc, #104]	; (8001438 <Vector88+0x78>)
 80013d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	b313      	cbz	r3, 800141e <Vector88+0x5e>
    if (ADCD1.grpp != NULL)
 80013d8:	6923      	ldr	r3, [r4, #16]
 80013da:	b303      	cbz	r3, 800141e <Vector88+0x5e>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff ff57 	bl	8001290 <adc_lld_stop_conversion>
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	b303      	cbz	r3, 800142a <Vector88+0x6a>
 80013e8:	2205      	movs	r2, #5
 80013ea:	7022      	strb	r2, [r4, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4798      	blx	r3
 80013f2:	7823      	ldrb	r3, [r4, #0]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	bf04      	itt	eq
 80013f8:	2302      	moveq	r3, #2
 80013fa:	7023      	strbeq	r3, [r4, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	6123      	str	r3, [r4, #16]
 8001400:	2320      	movs	r3, #32
 8001402:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001406:	6960      	ldr	r0, [r4, #20]
 8001408:	b130      	cbz	r0, 8001418 <Vector88+0x58>
    tp->u.rdymsg = msg;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8001410:	2300      	movs	r3, #0
 8001412:	6163      	str	r3, [r4, #20]
    (void) chSchReadyI(tp);
 8001414:	f7ff fa9c 	bl	8000950 <chSchReadyI>
 8001418:	2300      	movs	r3, #0
 800141a:	f383 8811 	msr	BASEPRI, r3
}
 800141e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001422:	f000 bea5 	b.w	8002170 <_port_irq_epilogue>
 8001426:	f000 bea3 	b.w	8002170 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800142a:	2202      	movs	r2, #2
 800142c:	6123      	str	r3, [r4, #16]
 800142e:	7022      	strb	r2, [r4, #0]
 8001430:	e7e6      	b.n	8001400 <Vector88+0x40>
 8001432:	bf00      	nop
 8001434:	40012000 	.word	0x40012000
 8001438:	20000e48 	.word	0x20000e48
 800143c:	00000000 	.word	0x00000000

08001440 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <VectorE0+0x6c>)
OSAL_IRQ_HANDLER(VectorE0) {
 8001442:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8001444:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4014      	ands	r4, r2
 800144a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800144e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8001450:	0562      	lsls	r2, r4, #21
 8001452:	d504      	bpl.n	800145e <VectorE0+0x1e>
 8001454:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <VectorE0+0x70>)
 8001456:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001458:	b10b      	cbz	r3, 800145e <VectorE0+0x1e>
 800145a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800145c:	4798      	blx	r3
  exti_serve_irq(pr, 11);
 800145e:	0523      	lsls	r3, r4, #20
 8001460:	d504      	bpl.n	800146c <VectorE0+0x2c>
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <VectorE0+0x70>)
 8001464:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001466:	b10b      	cbz	r3, 800146c <VectorE0+0x2c>
 8001468:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800146a:	4798      	blx	r3
  exti_serve_irq(pr, 12);
 800146c:	04e0      	lsls	r0, r4, #19
 800146e:	d504      	bpl.n	800147a <VectorE0+0x3a>
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <VectorE0+0x70>)
 8001472:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001474:	b10b      	cbz	r3, 800147a <VectorE0+0x3a>
 8001476:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001478:	4798      	blx	r3
  exti_serve_irq(pr, 13);
 800147a:	04a1      	lsls	r1, r4, #18
 800147c:	d504      	bpl.n	8001488 <VectorE0+0x48>
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <VectorE0+0x70>)
 8001480:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8001482:	b10b      	cbz	r3, 8001488 <VectorE0+0x48>
 8001484:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001486:	4798      	blx	r3
  exti_serve_irq(pr, 14);
 8001488:	0462      	lsls	r2, r4, #17
 800148a:	d504      	bpl.n	8001496 <VectorE0+0x56>
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <VectorE0+0x70>)
 800148e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001490:	b10b      	cbz	r3, 8001496 <VectorE0+0x56>
 8001492:	6f50      	ldr	r0, [r2, #116]	; 0x74
 8001494:	4798      	blx	r3
  exti_serve_irq(pr, 15);
 8001496:	0423      	lsls	r3, r4, #16
 8001498:	d504      	bpl.n	80014a4 <VectorE0+0x64>
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <VectorE0+0x70>)
 800149c:	6f93      	ldr	r3, [r2, #120]	; 0x78
 800149e:	b10b      	cbz	r3, 80014a4 <VectorE0+0x64>
 80014a0:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 80014a2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80014a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80014a8:	f000 be62 	b.w	8002170 <_port_irq_epilogue>
 80014ac:	40013c00 	.word	0x40013c00
 80014b0:	20000808 	.word	0x20000808
	...

080014c0 <Vector9C>:
  pr = EXTI->PR;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <Vector9C+0x60>)
OSAL_IRQ_HANDLER(Vector9C) {
 80014c2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 80014c4:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4014      	ands	r4, r2
 80014ca:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
 80014ce:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 80014d0:	06a3      	lsls	r3, r4, #26
 80014d2:	d504      	bpl.n	80014de <Vector9C+0x1e>
 80014d4:	4a13      	ldr	r2, [pc, #76]	; (8001524 <Vector9C+0x64>)
 80014d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80014d8:	b10b      	cbz	r3, 80014de <Vector9C+0x1e>
 80014da:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80014dc:	4798      	blx	r3
  exti_serve_irq(pr, 6);
 80014de:	0660      	lsls	r0, r4, #25
 80014e0:	d504      	bpl.n	80014ec <Vector9C+0x2c>
 80014e2:	4a10      	ldr	r2, [pc, #64]	; (8001524 <Vector9C+0x64>)
 80014e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014e6:	b10b      	cbz	r3, 80014ec <Vector9C+0x2c>
 80014e8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80014ea:	4798      	blx	r3
  exti_serve_irq(pr, 7);
 80014ec:	0621      	lsls	r1, r4, #24
 80014ee:	d504      	bpl.n	80014fa <Vector9C+0x3a>
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <Vector9C+0x64>)
 80014f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80014f4:	b10b      	cbz	r3, 80014fa <Vector9C+0x3a>
 80014f6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80014f8:	4798      	blx	r3
  exti_serve_irq(pr, 8);
 80014fa:	05e2      	lsls	r2, r4, #23
 80014fc:	d504      	bpl.n	8001508 <Vector9C+0x48>
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <Vector9C+0x64>)
 8001500:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001502:	b10b      	cbz	r3, 8001508 <Vector9C+0x48>
 8001504:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8001506:	4798      	blx	r3
  exti_serve_irq(pr, 9);
 8001508:	05a3      	lsls	r3, r4, #22
 800150a:	d504      	bpl.n	8001516 <Vector9C+0x56>
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <Vector9C+0x64>)
 800150e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8001510:	b10b      	cbz	r3, 8001516 <Vector9C+0x56>
 8001512:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001514:	4798      	blx	r3
}
 8001516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800151a:	f000 be29 	b.w	8002170 <_port_irq_epilogue>
 800151e:	bf00      	nop
 8001520:	40013c00 	.word	0x40013c00
 8001524:	20000808 	.word	0x20000808
	...

08001530 <Vector68>:
  pr = EXTI->PR;
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <Vector68+0x24>)
OSAL_IRQ_HANDLER(Vector68) {
 8001532:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001534:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8001536:	6811      	ldr	r1, [r2, #0]
 8001538:	400b      	ands	r3, r1
 800153a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 800153e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
 8001540:	b123      	cbz	r3, 800154c <Vector68+0x1c>
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <Vector68+0x28>)
 8001544:	6a13      	ldr	r3, [r2, #32]
 8001546:	b10b      	cbz	r3, 800154c <Vector68+0x1c>
 8001548:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800154a:	4798      	blx	r3
}
 800154c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001550:	f000 be0e 	b.w	8002170 <_port_irq_epilogue>
 8001554:	40013c00 	.word	0x40013c00
 8001558:	20000808 	.word	0x20000808
 800155c:	00000000 	.word	0x00000000

08001560 <Vector64>:
  pr = EXTI->PR;
 8001560:	4a08      	ldr	r2, [pc, #32]	; (8001584 <Vector64+0x24>)
OSAL_IRQ_HANDLER(Vector64) {
 8001562:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001564:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8001566:	6811      	ldr	r1, [r2, #0]
 8001568:	400b      	ands	r3, r1
 800156a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 800156e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
 8001570:	b123      	cbz	r3, 800157c <Vector64+0x1c>
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <Vector64+0x28>)
 8001574:	6993      	ldr	r3, [r2, #24]
 8001576:	b10b      	cbz	r3, 800157c <Vector64+0x1c>
 8001578:	69d0      	ldr	r0, [r2, #28]
 800157a:	4798      	blx	r3
}
 800157c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001580:	f000 bdf6 	b.w	8002170 <_port_irq_epilogue>
 8001584:	40013c00 	.word	0x40013c00
 8001588:	20000808 	.word	0x20000808
 800158c:	00000000 	.word	0x00000000

08001590 <Vector60>:
  pr = EXTI->PR;
 8001590:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <Vector60+0x24>)
OSAL_IRQ_HANDLER(Vector60) {
 8001592:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001594:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8001596:	6811      	ldr	r1, [r2, #0]
 8001598:	400b      	ands	r3, r1
 800159a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 800159e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
 80015a0:	b123      	cbz	r3, 80015ac <Vector60+0x1c>
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <Vector60+0x28>)
 80015a4:	6913      	ldr	r3, [r2, #16]
 80015a6:	b10b      	cbz	r3, 80015ac <Vector60+0x1c>
 80015a8:	6950      	ldr	r0, [r2, #20]
 80015aa:	4798      	blx	r3
}
 80015ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80015b0:	f000 bdde 	b.w	8002170 <_port_irq_epilogue>
 80015b4:	40013c00 	.word	0x40013c00
 80015b8:	20000808 	.word	0x20000808
 80015bc:	00000000 	.word	0x00000000

080015c0 <Vector5C>:
  pr = EXTI->PR;
 80015c0:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <Vector5C+0x24>)
OSAL_IRQ_HANDLER(Vector5C) {
 80015c2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80015c4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 80015c6:	6811      	ldr	r1, [r2, #0]
 80015c8:	400b      	ands	r3, r1
 80015ca:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 80015ce:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
 80015d0:	b123      	cbz	r3, 80015dc <Vector5C+0x1c>
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <Vector5C+0x28>)
 80015d4:	6893      	ldr	r3, [r2, #8]
 80015d6:	b10b      	cbz	r3, 80015dc <Vector5C+0x1c>
 80015d8:	68d0      	ldr	r0, [r2, #12]
 80015da:	4798      	blx	r3
}
 80015dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80015e0:	f000 bdc6 	b.w	8002170 <_port_irq_epilogue>
 80015e4:	40013c00 	.word	0x40013c00
 80015e8:	20000808 	.word	0x20000808
 80015ec:	00000000 	.word	0x00000000

080015f0 <Vector58>:
  pr = EXTI->PR;
 80015f0:	4a08      	ldr	r2, [pc, #32]	; (8001614 <Vector58+0x24>)
OSAL_IRQ_HANDLER(Vector58) {
 80015f2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80015f4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 80015f6:	6811      	ldr	r1, [r2, #0]
 80015f8:	400b      	ands	r3, r1
 80015fa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 80015fe:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
 8001600:	b123      	cbz	r3, 800160c <Vector58+0x1c>
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <Vector58+0x28>)
 8001604:	6813      	ldr	r3, [r2, #0]
 8001606:	b10b      	cbz	r3, 800160c <Vector58+0x1c>
 8001608:	6850      	ldr	r0, [r2, #4]
 800160a:	4798      	blx	r3
}
 800160c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001610:	f000 bdae 	b.w	8002170 <_port_irq_epilogue>
 8001614:	40013c00 	.word	0x40013c00
 8001618:	20000808 	.word	0x20000808
 800161c:	00000000 	.word	0x00000000

08001620 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4f13      	ldr	r7, [pc, #76]	; (8001670 <__init_ram_areas+0x50>)
 8001624:	4d13      	ldr	r5, [pc, #76]	; (8001674 <__init_ram_areas+0x54>)
 8001626:	4c14      	ldr	r4, [pc, #80]	; (8001678 <__init_ram_areas+0x58>)
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <__init_ram_areas+0x5c>)
 800162a:	4915      	ldr	r1, [pc, #84]	; (8001680 <__init_ram_areas+0x60>)
 800162c:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001630:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8001632:	429c      	cmp	r4, r3
 8001634:	d911      	bls.n	800165a <__init_ram_areas+0x3a>
 8001636:	3904      	subs	r1, #4
 8001638:	461a      	mov	r2, r3
      *p = *tp;
 800163a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800163e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8001642:	4294      	cmp	r4, r2
 8001644:	d8f9      	bhi.n	800163a <__init_ram_areas+0x1a>
 8001646:	43da      	mvns	r2, r3
 8001648:	4414      	add	r4, r2
 800164a:	f024 0403 	bic.w	r4, r4, #3
 800164e:	3404      	adds	r4, #4
 8001650:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8001652:	429d      	cmp	r5, r3
 8001654:	d903      	bls.n	800165e <__init_ram_areas+0x3e>
      *p = 0;
 8001656:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800165a:	429d      	cmp	r5, r3
 800165c:	d8fb      	bhi.n	8001656 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800165e:	4577      	cmp	r7, lr
 8001660:	d004      	beq.n	800166c <__init_ram_areas+0x4c>
 8001662:	f107 0110 	add.w	r1, r7, #16
 8001666:	c93a      	ldmia	r1, {r1, r3, r4, r5}
 8001668:	3710      	adds	r7, #16
 800166a:	e7e2      	b.n	8001632 <__init_ram_areas+0x12>
 800166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166e:	bf00      	nop
 8001670:	080027d4 	.word	0x080027d4
 8001674:	20000f70 	.word	0x20000f70
 8001678:	20000f70 	.word	0x20000f70
 800167c:	20000f70 	.word	0x20000f70
 8001680:	08002a5c 	.word	0x08002a5c
	...

08001690 <__default_exit>:
void __default_exit(void) {
 8001690:	e7fe      	b.n	8001690 <__default_exit>
 8001692:	bf00      	nop
	...

080016a0 <__late_init>:
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
	...

080016b0 <__core_init>:
void __core_init(void) {
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
	...

080016c0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 80016c0:	b4f0      	push	{r4, r5, r6, r7}
 80016c2:	2320      	movs	r3, #32
 80016c4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80016c8:	4d0d      	ldr	r5, [pc, #52]	; (8001700 <chCoreAllocAlignedWithOffset+0x40>)
 80016ca:	682f      	ldr	r7, [r5, #0]
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80016cc:	686c      	ldr	r4, [r5, #4]
 80016ce:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80016d0:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 80016d2:	1983      	adds	r3, r0, r6
 80016d4:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80016d6:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 80016d8:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80016da:	4008      	ands	r0, r1
  next = p + size;
 80016dc:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80016de:	42a3      	cmp	r3, r4
 80016e0:	d807      	bhi.n	80016f2 <chCoreAllocAlignedWithOffset+0x32>
 80016e2:	429f      	cmp	r7, r3
 80016e4:	d805      	bhi.n	80016f2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80016ee:	bcf0      	pop	{r4, r5, r6, r7}
 80016f0:	4770      	bx	lr
    return NULL;
 80016f2:	2000      	movs	r0, #0
 80016f4:	2300      	movs	r3, #0
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bcf0      	pop	{r4, r5, r6, r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200009b0 	.word	0x200009b0
	...

08001710 <adc_callback>:

void adc_callback(ADCDriver *adcp, adcsample_t *buffer, size_t n) {
  (void) buffer; (void) n;
  /* Note, only in the ADC_COMPLETE state because the ADC driver fires an
     intermediate callback when the buffer is half full.*/
  if (adcp->state == ADC_COMPLETE) {  
 8001710:	7803      	ldrb	r3, [r0, #0]
 8001712:	2b04      	cmp	r3, #4
 8001714:	d116      	bne.n	8001744 <adc_callback+0x34>
    /* Calculates the average values from the ADC samples.*/
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 8001716:	490c      	ldr	r1, [pc, #48]	; (8001748 <adc_callback+0x38>)
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <adc_callback+0x3c>)
 800171a:	880a      	ldrh	r2, [r1, #0]
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 800171c:	884b      	ldrh	r3, [r1, #2]
void adc_callback(ADCDriver *adcp, adcsample_t *buffer, size_t n) {
 800171e:	b4f0      	push	{r4, r5, r6, r7}
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 8001720:	888d      	ldrh	r5, [r1, #4]
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 8001722:	88cc      	ldrh	r4, [r1, #6]
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 8001724:	890f      	ldrh	r7, [r1, #8]
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 8001726:	894e      	ldrh	r6, [r1, #10]
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 8001728:	442a      	add	r2, r5
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 800172a:	4423      	add	r3, r4
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 800172c:	898d      	ldrh	r5, [r1, #12]
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 800172e:	89cc      	ldrh	r4, [r1, #14]
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <adc_callback+0x40>)
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 8001732:	443a      	add	r2, r7
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 8001734:	4433      	add	r3, r6
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 8001736:	442a      	add	r2, r5
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 8001738:	4423      	add	r3, r4
  }
}
 800173a:	bcf0      	pop	{r4, r5, r6, r7}
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 800173c:	1092      	asrs	r2, r2, #2
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 800173e:	109b      	asrs	r3, r3, #2
    avg_adc1ch0 = (samples1[0] + samples1[2] + samples1[4] + samples1[6]) / 4;
 8001740:	8002      	strh	r2, [r0, #0]
    avg_adc1ch1 = (samples1[1] + samples1[3] + samples1[5] + samples1[7]) / 4;
 8001742:	800b      	strh	r3, [r1, #0]
}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000a60 	.word	0x20000a60
 800174c:	20000888 	.word	0x20000888
 8001750:	2000088a 	.word	0x2000088a
	...

08001760 <adcerrorcallback>:
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
	...

08001770 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8001770:	b4f0      	push	{r4, r5, r6, r7}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001772:	4e0b      	ldr	r6, [pc, #44]	; (80017a0 <chCoreAllocAlignedI+0x30>)
 8001774:	6837      	ldr	r7, [r6, #0]
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8001776:	6872      	ldr	r2, [r6, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001778:	1e7c      	subs	r4, r7, #1
  size = MEM_ALIGN_NEXT(size, align);
 800177a:	1e4b      	subs	r3, r1, #1
 800177c:	424d      	negs	r5, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800177e:	440c      	add	r4, r1
  size = MEM_ALIGN_NEXT(size, align);
 8001780:	1819      	adds	r1, r3, r0
 8001782:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001784:	ea04 0005 	and.w	r0, r4, r5
  next = p + size;
 8001788:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800178a:	4291      	cmp	r1, r2
 800178c:	d804      	bhi.n	8001798 <chCoreAllocAlignedI+0x28>
 800178e:	428f      	cmp	r7, r1
 8001790:	d802      	bhi.n	8001798 <chCoreAllocAlignedI+0x28>
  ch_memcore.nextmem = next;
 8001792:	6031      	str	r1, [r6, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001794:	bcf0      	pop	{r4, r5, r6, r7}
 8001796:	4770      	bx	lr
    return NULL;
 8001798:	2000      	movs	r0, #0
 800179a:	bcf0      	pop	{r4, r5, r6, r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200009b0 	.word	0x200009b0
	...

080017b0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <chTMStopMeasurementX+0x40>)
 80017b4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 80017b6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80017b8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 80017ba:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80017bc:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 80017be:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 80017c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80017c4:	1bdb      	subs	r3, r3, r7
 80017c6:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 80017c8:	18e4      	adds	r4, r4, r3
 80017ca:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80017ce:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80017d0:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80017d2:	bf88      	it	hi
 80017d4:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80017d6:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 80017d8:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80017da:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 80017de:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80017e0:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 80017e2:	bf38      	it	cc
 80017e4:	6003      	strcc	r3, [r0, #0]
}
 80017e6:	bcf0      	pop	{r4, r5, r6, r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e0001000 	.word	0xe0001000
 80017f0:	20000ef8 	.word	0x20000ef8
	...

08001800 <Thread1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <Thread1+0x3c>)
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <Thread1+0x40>)
 8001804:	699b      	ldr	r3, [r3, #24]
static THD_FUNCTION(Thread1, arg) {
  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = (flag_adc == 1) ? 300 : 1000;
    palToggleLine(LED2);
 8001806:	4c0f      	ldr	r4, [pc, #60]	; (8001844 <Thread1+0x44>)
static THD_FUNCTION(Thread1, arg) {
 8001808:	b580      	push	{r7, lr}
 800180a:	4f0f      	ldr	r7, [pc, #60]	; (8001848 <Thread1+0x48>)
 800180c:	619a      	str	r2, [r3, #24]
    systime_t time = (flag_adc == 1) ? 300 : 1000;
 800180e:	f242 7610 	movw	r6, #10000	; 0x2710
 8001812:	f640 35b8 	movw	r5, #3000	; 0xbb8
    palToggleLine(LED2);
 8001816:	6963      	ldr	r3, [r4, #20]
    systime_t time = (flag_adc == 1) ? 300 : 1000;
 8001818:	6839      	ldr	r1, [r7, #0]
    palToggleLine(LED2);
 800181a:	f083 0320 	eor.w	r3, r3, #32
 800181e:	6163      	str	r3, [r4, #20]
    systime_t time = (flag_adc == 1) ? 300 : 1000;
 8001820:	2901      	cmp	r1, #1
 8001822:	bf14      	ite	ne
 8001824:	4631      	movne	r1, r6
 8001826:	4629      	moveq	r1, r5
 8001828:	2320      	movs	r3, #32
 800182a:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800182e:	2008      	movs	r0, #8
 8001830:	f7fe fffe 	bl	8000830 <chSchGoSleepTimeoutS>
 8001834:	2300      	movs	r3, #0
 8001836:	f383 8811 	msr	BASEPRI, r3
 800183a:	e7ec      	b.n	8001816 <Thread1+0x16>
 800183c:	20000ef8 	.word	0x20000ef8
 8001840:	08002854 	.word	0x08002854
 8001844:	40020400 	.word	0x40020400
 8001848:	20000800 	.word	0x20000800
 800184c:	00000000 	.word	0x00000000

08001850 <Thread3>:
/*=============================================================================*/

/*=============================================================================*/
/*--------------  ADC1  --------------------*/
static THD_WORKING_AREA(waThread3, 128);
static THD_FUNCTION(Thread3, arg) {
 8001850:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001854:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <Thread3+0x1cc>)
 8001856:	4a72      	ldr	r2, [pc, #456]	; (8001a20 <Thread3+0x1d0>)
 8001858:	699b      	ldr	r3, [r3, #24]
  (void)arg;
  chRegSetThreadName("Read-ADC");
  /* Setting up analog inputs */
  palSetGroupMode(GPIOA, PAL_PORT_BIT(0) | PAL_PORT_BIT(1), 0, PAL_MODE_INPUT_ANALOG); //PA0 - PA1
 800185a:	4872      	ldr	r0, [pc, #456]	; (8001a24 <Thread3+0x1d4>)
 800185c:	619a      	str	r2, [r3, #24]
 800185e:	2203      	movs	r2, #3
static THD_FUNCTION(Thread3, arg) {
 8001860:	b083      	sub	sp, #12
  palSetGroupMode(GPIOA, PAL_PORT_BIT(0) | PAL_PORT_BIT(1), 0, PAL_MODE_INPUT_ANALOG); //PA0 - PA1
 8001862:	4611      	mov	r1, r2
 8001864:	f7ff fb2c 	bl	8000ec0 <_pal_lld_setgroupmode>
 8001868:	2320      	movs	r3, #32
 800186a:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 800186e:	4c6e      	ldr	r4, [pc, #440]	; (8001a28 <Thread3+0x1d8>)
  if (adcp->state == ADC_STOP) {
 8001870:	7823      	ldrb	r3, [r4, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	2b01      	cmp	r3, #1
 8001876:	6062      	str	r2, [r4, #4]
 8001878:	d066      	beq.n	8001948 <Thread3+0xf8>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 800187a:	2302      	movs	r3, #2
 800187c:	7023      	strb	r3, [r4, #0]
 800187e:	2500      	movs	r5, #0
 8001880:	f385 8811 	msr	BASEPRI, r5
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 8001884:	4f69      	ldr	r7, [pc, #420]	; (8001a2c <Thread3+0x1dc>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	2620      	movs	r6, #32
 8001890:	f386 8811 	msr	BASEPRI, r6
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8001894:	2303      	movs	r3, #3
  adcp->depth    = depth;
 8001896:	2204      	movs	r2, #4
  adcp->state    = ADC_ACTIVE;
 8001898:	7023      	strb	r3, [r4, #0]
  adcp->samples  = samples;
 800189a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 8001a54 <Thread3+0x204>
  adcp->grpp     = grpp;
 800189e:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <Thread3+0x1e0>)
  adcp->depth    = depth;
 80018a0:	60e2      	str	r2, [r4, #12]
  adcp->samples  = samples;
 80018a2:	f8c4 a008 	str.w	sl, [r4, #8]
  adcp->grpp     = grpp;
 80018a6:	6123      	str	r3, [r4, #16]
  adc_lld_start_conversion(adcp);
 80018a8:	f000 fd0a 	bl	80022c0 <adc_lld_start_conversion.constprop.22>
 80018ac:	f385 8811 	msr	BASEPRI, r5
 80018b0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001a58 <Thread3+0x208>
 80018b4:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8001a5c <Thread3+0x20c>
 80018b8:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8001a60 <Thread3+0x210>
 80018bc:	e022      	b.n	8001904 <Thread3+0xb4>
 80018be:	f386 8811 	msr	BASEPRI, r6
  adcp->depth    = depth;
 80018c2:	2204      	movs	r2, #4
  adcp->state    = ADC_ACTIVE;
 80018c4:	2303      	movs	r3, #3
  adcp->grpp     = grpp;
 80018c6:	495a      	ldr	r1, [pc, #360]	; (8001a30 <Thread3+0x1e0>)
  adcp->samples  = samples;
 80018c8:	f8c4 a008 	str.w	sl, [r4, #8]
  adcp->grpp     = grpp;
 80018cc:	6121      	str	r1, [r4, #16]
  adcp->depth    = depth;
 80018ce:	60e2      	str	r2, [r4, #12]
  adcp->state    = ADC_ACTIVE;
 80018d0:	7023      	strb	r3, [r4, #0]
  adc_lld_start_conversion(adcp);
 80018d2:	f000 fcf5 	bl	80022c0 <adc_lld_start_conversion.constprop.22>
 80018d6:	f385 8811 	msr	BASEPRI, r5
  adcSTM32EnableTSVREFE();
  adcStartConversion(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
  while (true) {
    if(flag_adc!=0){
      adcStartConversion(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
      chprintf((BaseSequentialStream *)&SD2,"ADC1_CH0 : %d \r\n\r\n", avg_adc1ch0);
 80018da:	4956      	ldr	r1, [pc, #344]	; (8001a34 <Thread3+0x1e4>)
 80018dc:	f8bb 2000 	ldrh.w	r2, [fp]
 80018e0:	4855      	ldr	r0, [pc, #340]	; (8001a38 <Thread3+0x1e8>)
 80018e2:	f000 fd95 	bl	8002410 <chprintf.constprop.0>
      chprintf((BaseSequentialStream *)&SD2,"ADC1_CH1 : %d \r\n\r\n", avg_adc1ch1);
 80018e6:	f8b9 2000 	ldrh.w	r2, [r9]
 80018ea:	4954      	ldr	r1, [pc, #336]	; (8001a3c <Thread3+0x1ec>)
 80018ec:	4852      	ldr	r0, [pc, #328]	; (8001a38 <Thread3+0x1e8>)
 80018ee:	f000 fd8f 	bl	8002410 <chprintf.constprop.0>
 80018f2:	f386 8811 	msr	BASEPRI, r6
 80018f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018fa:	2008      	movs	r0, #8
 80018fc:	f7fe ff98 	bl	8000830 <chSchGoSleepTimeoutS>
 8001900:	f385 8811 	msr	BASEPRI, r5
    if(flag_adc!=0){
 8001904:	f8d8 3000 	ldr.w	r3, [r8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1d8      	bne.n	80018be <Thread3+0x6e>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_READY) || (adcp->state == ADC_ACTIVE),
                "invalid state");
  if (adcp->state != ADC_READY) {
 8001912:	7822      	ldrb	r2, [r4, #0]
    adc_lld_stop_conversion(adcp);
 8001914:	4844      	ldr	r0, [pc, #272]	; (8001a28 <Thread3+0x1d8>)
  if (adcp->state != ADC_READY) {
 8001916:	2a02      	cmp	r2, #2
 8001918:	d00f      	beq.n	800193a <Thread3+0xea>
    adc_lld_stop_conversion(adcp);
 800191a:	f7ff fcb9 	bl	8001290 <adc_lld_stop_conversion>
  if (*trp != NULL) {
 800191e:	6962      	ldr	r2, [r4, #20]
    adcp->grpp  = NULL;
 8001920:	9b01      	ldr	r3, [sp, #4]
 8001922:	6123      	str	r3, [r4, #16]
    adcp->state = ADC_READY;
 8001924:	f04f 0e02 	mov.w	lr, #2
    chSchWakeupS(tp, msg);
 8001928:	f06f 0101 	mvn.w	r1, #1
 800192c:	4610      	mov	r0, r2
 800192e:	f884 e000 	strb.w	lr, [r4]
  if (*trp != NULL) {
 8001932:	b112      	cbz	r2, 800193a <Thread3+0xea>
    *trp = NULL;
 8001934:	6163      	str	r3, [r4, #20]
    chSchWakeupS(tp, msg);
 8001936:	f7fe ff33 	bl	80007a0 <chSchWakeupS>
 800193a:	f385 8811 	msr	BASEPRI, r5
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32DisableTSVREFE(void) {

  ADC->CCR &= ~ADC_CCR_TSVREFE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e7d4      	b.n	80018f2 <Thread3+0xa2>
      b = dmaStreamAllocate(adcp->dmastp,
 8001948:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 800194a:	4d3d      	ldr	r5, [pc, #244]	; (8001a40 <Thread3+0x1f0>)
 800194c:	7a48      	ldrb	r0, [r1, #9]
 800194e:	682e      	ldr	r6, [r5, #0]
 8001950:	4083      	lsls	r3, r0
 8001952:	4233      	tst	r3, r6
 8001954:	d148      	bne.n	80019e8 <Thread3+0x198>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001956:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <Thread3+0x1f4>)
 8001958:	4f3b      	ldr	r7, [pc, #236]	; (8001a48 <Thread3+0x1f8>)
 800195a:	f842 7030 	str.w	r7, [r2, r0, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 800195e:	4333      	orrs	r3, r6
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001960:	eb02 02c0 	add.w	r2, r2, r0, lsl #3

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001964:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001968:	602b      	str	r3, [r5, #0]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800196a:	6054      	str	r4, [r2, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 800196c:	d008      	beq.n	8001980 <Thread3+0x130>
    rccEnableDMA1(true);
 800196e:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <Thread3+0x1fc>)
 8001970:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001972:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8001976:	6310      	str	r0, [r2, #48]	; 0x30
 8001978:	6d10      	ldr	r0, [r2, #80]	; 0x50
 800197a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 800197e:	6510      	str	r0, [r2, #80]	; 0x50
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8001980:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001984:	d008      	beq.n	8001998 <Thread3+0x148>
    rccEnableDMA2(true);
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <Thread3+0x1fc>)
 8001988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800198a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
 8001990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001992:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001996:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001998:	680a      	ldr	r2, [r1, #0]
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	f023 031f 	bic.w	r3, r3, #31
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	6813      	ldr	r3, [r2, #0]
 80019a4:	f013 0301 	ands.w	r3, r3, #1
 80019a8:	d1fb      	bne.n	80019a2 <Thread3+0x152>
 80019aa:	7a0d      	ldrb	r5, [r1, #8]
 80019ac:	684e      	ldr	r6, [r1, #4]
 80019ae:	203d      	movs	r0, #61	; 0x3d
 80019b0:	40a8      	lsls	r0, r5
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80019b2:	2521      	movs	r5, #33	; 0x21
  dmaStreamDisable(dmastp);
 80019b4:	6030      	str	r0, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80019b6:	6013      	str	r3, [r2, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80019b8:	6155      	str	r5, [r2, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 80019ba:	7a89      	ldrb	r1, [r1, #10]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019bc:	094b      	lsrs	r3, r1, #5
 80019be:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80019c0:	f101 4560 	add.w	r5, r1, #3758096384	; 0xe0000000
 80019c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019c8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80019cc:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019d0:	f001 011f 	and.w	r1, r1, #31
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80019da:	2660      	movs	r6, #96	; 0x60
 80019dc:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019e0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80019e4:	6019      	str	r1, [r3, #0]
 80019e6:	e000      	b.n	80019ea <Thread3+0x19a>
 80019e8:	680a      	ldr	r2, [r1, #0]
      rccEnableADC1(true);
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <Thread3+0x1fc>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 80019ec:	4918      	ldr	r1, [pc, #96]	; (8001a50 <Thread3+0x200>)
 80019ee:	6091      	str	r1, [r2, #8]
      rccEnableADC1(true);
 80019f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    adcp->adc->CR1 = 0;
 80019f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <Thread3+0x1dc>)
      rccEnableADC1(true);
 80019f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80019fa:	6459      	str	r1, [r3, #68]	; 0x44
 80019fc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80019fe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a02:	6659      	str	r1, [r3, #100]	; 0x64
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001a04:	6843      	ldr	r3, [r0, #4]
 8001a06:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    adcp->adc->CR1 = 0;
 8001a0a:	2100      	movs	r1, #0
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001a10:	2501      	movs	r5, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001a12:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
 8001a14:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8001a16:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001a18:	6095      	str	r5, [r2, #8]
 8001a1a:	e72e      	b.n	800187a <Thread3+0x2a>
 8001a1c:	20000ef8 	.word	0x20000ef8
 8001a20:	080028c4 	.word	0x080028c4
 8001a24:	40020000 	.word	0x40020000
 8001a28:	20000e48 	.word	0x20000e48
 8001a2c:	40012300 	.word	0x40012300
 8001a30:	080029b8 	.word	0x080029b8
 8001a34:	080028d0 	.word	0x080028d0
 8001a38:	20000e7c 	.word	0x20000e7c
 8001a3c:	080028e4 	.word	0x080028e4
 8001a40:	20000a58 	.word	0x20000a58
 8001a44:	200009d8 	.word	0x200009d8
 8001a48:	080012d1 	.word	0x080012d1
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	4001204c 	.word	0x4001204c
 8001a54:	20000a60 	.word	0x20000a60
 8001a58:	20000800 	.word	0x20000800
 8001a5c:	20000888 	.word	0x20000888
 8001a60:	2000088a 	.word	0x2000088a
	...

08001a70 <Thread2>:
static THD_FUNCTION(Thread2, arg) {
 8001a70:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001a74:	4d55      	ldr	r5, [pc, #340]	; (8001bcc <Thread2+0x15c>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001a76:	4956      	ldr	r1, [pc, #344]	; (8001bd0 <Thread2+0x160>)
 8001a78:	69aa      	ldr	r2, [r5, #24]
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <Thread2+0x164>)
 8001a7c:	4856      	ldr	r0, [pc, #344]	; (8001bd8 <Thread2+0x168>)
 8001a7e:	6190      	str	r0, [r2, #24]
 8001a80:	b08b      	sub	sp, #44	; 0x2c
 8001a82:	6009      	str	r1, [r1, #0]
 8001a84:	601b      	str	r3, [r3, #0]
 8001a86:	2020      	movs	r0, #32
 8001a88:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8001a8c:	ac0a      	add	r4, sp, #40	; 0x28
 8001a8e:	680a      	ldr	r2, [r1, #0]
 8001a90:	f844 2d14 	str.w	r2, [r4, #-20]!
  esp->next     = elp;
  elp->listener = currp;
 8001a94:	69aa      	ldr	r2, [r5, #24]
 8001a96:	9206      	str	r2, [sp, #24]
  elp->events   = events;
 8001a98:	2701      	movs	r7, #1
  elp->flags    = (eventflags_t)0;
 8001a9a:	2200      	movs	r2, #0
  elp->wflags   = wflags;
 8001a9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  elp->events   = events;
 8001aa0:	9707      	str	r7, [sp, #28]
  esp->next     = elp;
 8001aa2:	600c      	str	r4, [r1, #0]
  elp->flags    = (eventflags_t)0;
 8001aa4:	9208      	str	r2, [sp, #32]
  elp->wflags   = wflags;
 8001aa6:	9609      	str	r6, [sp, #36]	; 0x24
 8001aa8:	f382 8811 	msr	BASEPRI, r2
 8001aac:	f380 8811 	msr	BASEPRI, r0
  elp->next     = esp->next;
 8001ab0:	a90a      	add	r1, sp, #40	; 0x28
 8001ab2:	681c      	ldr	r4, [r3, #0]
 8001ab4:	f841 4d28 	str.w	r4, [r1, #-40]!
  elp->listener = currp;
 8001ab8:	69af      	ldr	r7, [r5, #24]
  elp->flags    = (eventflags_t)0;
 8001aba:	9203      	str	r2, [sp, #12]
  elp->events   = events;
 8001abc:	2402      	movs	r4, #2
  elp->wflags   = wflags;
 8001abe:	9604      	str	r6, [sp, #16]
  elp->listener = currp;
 8001ac0:	9701      	str	r7, [sp, #4]
  elp->events   = events;
 8001ac2:	9402      	str	r4, [sp, #8]
  esp->next     = elp;
 8001ac4:	6019      	str	r1, [r3, #0]
 8001ac6:	f382 8811 	msr	BASEPRI, r2
 8001aca:	f380 8811 	msr	BASEPRI, r0
  /* Port index is obtained assuming that GPIO ports are placed at regular
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;

  /* Port selection in SYSCFG.*/
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 8001ace:	4c43      	ldr	r4, [pc, #268]	; (8001bdc <Thread2+0x16c>)
  /* Programming interrupt and event registers.*/
  EXTI_D1->IMR1 |= padmask;
  EXTI_D1->EMR1 &= ~padmask;
#else
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
    EXTI->RTSR |= padmask;
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <Thread2+0x170>)
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 8001ad2:	68e1      	ldr	r1, [r4, #12]
 8001ad4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8001ad8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001adc:	60e1      	str	r1, [r4, #12]
    EXTI->RTSR |= padmask;
 8001ade:	6899      	ldr	r1, [r3, #8]
 8001ae0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001ae4:	6099      	str	r1, [r3, #8]
  else
    EXTI->RTSR &= ~padmask;
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
    EXTI->FTSR |= padmask;
 8001ae6:	68d9      	ldr	r1, [r3, #12]
 8001ae8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001aec:	60d9      	str	r1, [r3, #12]
  else
    EXTI->FTSR &= ~padmask;

  /* Programming interrupt and event registers.*/
  EXTI->IMR |= padmask;
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001af4:	6019      	str	r1, [r3, #0]
  EXTI->EMR &= ~padmask;
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001afc:	6059      	str	r1, [r3, #4]
 8001afe:	f382 8811 	msr	BASEPRI, r2
 8001b02:	f380 8811 	msr	BASEPRI, r0
 * @api
 */
void palSetLineCallbackI(ioline_t line, palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_line_event(line);
  pep->cb = cb;
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <Thread2+0x174>)
 8001b08:	4937      	ldr	r1, [pc, #220]	; (8001be8 <Thread2+0x178>)
  pep->arg = arg;
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c
  pep->cb = cb;
 8001b0c:	6399      	str	r1, [r3, #56]	; 0x38
 8001b0e:	f382 8811 	msr	BASEPRI, r2
 8001b12:	4e36      	ldr	r6, [pc, #216]	; (8001bec <Thread2+0x17c>)
 8001b14:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001c00 <Thread2+0x190>
      palWriteLine(LED1, LED_ON);
 8001b18:	4f35      	ldr	r7, [pc, #212]	; (8001bf0 <Thread2+0x180>)
        chprintf((BaseSequentialStream *)&SD2,"Button Pressed : %d \r\n", count_button1pressed);
 8001b1a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8001c04 <Thread2+0x194>
 8001b1e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8001c08 <Thread2+0x198>
 8001b22:	e001      	b.n	8001b28 <Thread2+0xb8>
    if (events & EVENT_MASK(1)) {
 8001b24:	07a3      	lsls	r3, r4, #30
 8001b26:	d443      	bmi.n	8001bb0 <Thread2+0x140>
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8001b28:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8001b32:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001b36:	f013 0403 	ands.w	r4, r3, #3
 8001b3a:	d109      	bne.n	8001b50 <Thread2+0xe0>
    ctp->u.ewmask = events;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f7fe fe5c 	bl	8000800 <chSchGoSleepS>
    m = ctp->epending & events;
 8001b48:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8001b4c:	f003 0403 	and.w	r4, r3, #3
  }
  m ^= m & (m - (eventmask_t)1);
 8001b50:	4261      	negs	r1, r4
 8001b52:	400c      	ands	r4, r1
  ctp->epending &= ~m;
 8001b54:	ea23 0304 	bic.w	r3, r3, r4
 8001b58:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f383 8811 	msr	BASEPRI, r3
    if (events & EVENT_MASK(0)) {
 8001b62:	07e1      	lsls	r1, r4, #31
      palWriteLine(LED1, LED_ON);
 8001b64:	f04f 0380 	mov.w	r3, #128	; 0x80
    if (events & EVENT_MASK(0)) {
 8001b68:	d5dc      	bpl.n	8001b24 <Thread2+0xb4>
      palWriteLine(LED1, LED_ON);
 8001b6a:	61bb      	str	r3, [r7, #24]
      if(event_button1pressed==0){
 8001b6c:	6833      	ldr	r3, [r6, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1d8      	bne.n	8001b24 <Thread2+0xb4>
        count_button1pressed++;
 8001b72:	f8d8 3000 	ldr.w	r3, [r8]
 8001b76:	3301      	adds	r3, #1
        chprintf((BaseSequentialStream *)&SD2,"Button Pressed : %d \r\n", count_button1pressed);
 8001b78:	461a      	mov	r2, r3
        event_button1pressed=1;
 8001b7a:	f04f 0b01 	mov.w	fp, #1
        chprintf((BaseSequentialStream *)&SD2,"Button Pressed : %d \r\n", count_button1pressed);
 8001b7e:	4651      	mov	r1, sl
 8001b80:	4648      	mov	r0, r9
        count_button1pressed++;
 8001b82:	f8c8 3000 	str.w	r3, [r8]
        event_button1pressed=1;
 8001b86:	f8c6 b000 	str.w	fp, [r6]
        chprintf((BaseSequentialStream *)&SD2,"Button Pressed : %d \r\n", count_button1pressed);
 8001b8a:	f000 fc41 	bl	8002410 <chprintf.constprop.0>
        if((count_button1pressed/2 >= 1) && (count_button1pressed%2==0)){
 8001b8e:	f8d8 2000 	ldr.w	r2, [r8]
          chprintf((BaseSequentialStream *)&SD2,"Stop Reading ADC Value \r\n\r\n");
 8001b92:	4918      	ldr	r1, [pc, #96]	; (8001bf4 <Thread2+0x184>)
        if((count_button1pressed/2 >= 1) && (count_button1pressed%2==0)){
 8001b94:	455a      	cmp	r2, fp
          flag_adc=0; //stop read adc value
 8001b96:	f04f 0e00 	mov.w	lr, #0
          chprintf((BaseSequentialStream *)&SD2,"Stop Reading ADC Value \r\n\r\n");
 8001b9a:	4648      	mov	r0, r9
        if((count_button1pressed/2 >= 1) && (count_button1pressed%2==0)){
 8001b9c:	dd01      	ble.n	8001ba2 <Thread2+0x132>
 8001b9e:	07d2      	lsls	r2, r2, #31
 8001ba0:	d50c      	bpl.n	8001bbc <Thread2+0x14c>
          flag_adc=0; //stop read adc value
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <Thread2+0x188>)
 8001ba4:	f8c3 e000 	str.w	lr, [r3]
          chprintf((BaseSequentialStream *)&SD2,"Stop Reading ADC Value \r\n\r\n");
 8001ba8:	f000 fc32 	bl	8002410 <chprintf.constprop.0>
    if (events & EVENT_MASK(1)) {
 8001bac:	07a3      	lsls	r3, r4, #30
 8001bae:	d5bb      	bpl.n	8001b28 <Thread2+0xb8>
      palWriteLine(LED1, LED_OFF);
 8001bb0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
      event_button1pressed=0;
 8001bb4:	2300      	movs	r3, #0
      palWriteLine(LED1, LED_OFF);
 8001bb6:	61ba      	str	r2, [r7, #24]
      event_button1pressed=0;
 8001bb8:	6033      	str	r3, [r6, #0]
 8001bba:	e7b0      	b.n	8001b1e <Thread2+0xae>
          flag_adc=1; //start read adc value
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <Thread2+0x188>)
          chprintf((BaseSequentialStream *)&SD2,"Start Reading ADC Value \r\n\r\n");
 8001bbe:	490f      	ldr	r1, [pc, #60]	; (8001bfc <Thread2+0x18c>)
          flag_adc=1; //start read adc value
 8001bc0:	f8c3 b000 	str.w	fp, [r3]
          chprintf((BaseSequentialStream *)&SD2,"Start Reading ADC Value \r\n\r\n");
 8001bc4:	f000 fc24 	bl	8002410 <chprintf.constprop.0>
 8001bc8:	e7ac      	b.n	8001b24 <Thread2+0xb4>
 8001bca:	bf00      	nop
 8001bcc:	20000ef8 	.word	0x20000ef8
 8001bd0:	2000088c 	.word	0x2000088c
 8001bd4:	20000890 	.word	0x20000890
 8001bd8:	0800285c 	.word	0x0800285c
 8001bdc:	40013800 	.word	0x40013800
 8001be0:	40013c00 	.word	0x40013c00
 8001be4:	20000808 	.word	0x20000808
 8001be8:	08002251 	.word	0x08002251
 8001bec:	20000a5c 	.word	0x20000a5c
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	080028a8 	.word	0x080028a8
 8001bf8:	20000800 	.word	0x20000800
 8001bfc:	08002888 	.word	0x08002888
 8001c00:	200009b8 	.word	0x200009b8
 8001c04:	08002870 	.word	0x08002870
 8001c08:	20000e7c 	.word	0x20000e7c
 8001c0c:	00000000 	.word	0x00000000

08001c10 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <main+0x7c>)
  PWR->CR |= PWR_CR_DBP;
 8001c12:	481f      	ldr	r0, [pc, #124]	; (8001c90 <main+0x80>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c14:	6919      	ldr	r1, [r3, #16]
 8001c16:	ea6f 51c1 	mvn.w	r1, r1, lsl #23
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	ea6f 51d1 	mvn.w	r1, r1, lsr #23
/*--------------------------------------------------------------------------*/
/*=============================================================================*/
/*
 * Application entry point.
 */
int main(void) {
 8001c20:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  rccResetAHB2(~0);
 8001c24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c28:	6119      	str	r1, [r3, #16]
 8001c2a:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001c2c:	6959      	ldr	r1, [r3, #20]
 8001c2e:	615c      	str	r4, [r3, #20]
 8001c30:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001c32:	6a19      	ldr	r1, [r3, #32]
 8001c34:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8001c38:	6219      	str	r1, [r3, #32]
 8001c3a:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c3e:	625c      	str	r4, [r3, #36]	; 0x24
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 8001c42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c44:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c48:	6419      	str	r1, [r3, #64]	; 0x40
 8001c4a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001c4c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c50:	6619      	str	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8001c52:	6801      	ldr	r1, [r0, #0]
 8001c54:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001c58:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001c5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c5c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001c60:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001c64:	b089      	sub	sp, #36	; 0x24
 8001c66:	d003      	beq.n	8001c70 <main+0x60>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001c68:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001c6c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001c6e:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001c70:	4c07      	ldr	r4, [pc, #28]	; (8001c90 <main+0x80>)
  dma_streams_mask = 0U;
 8001c72:	4e08      	ldr	r6, [pc, #32]	; (8001c94 <main+0x84>)
 8001c74:	6862      	ldr	r2, [r4, #4]
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <main+0x88>)
 8001c78:	4d08      	ldr	r5, [pc, #32]	; (8001c9c <main+0x8c>)
 8001c7a:	4f09      	ldr	r7, [pc, #36]	; (8001ca0 <main+0x90>)
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c82:	6062      	str	r2, [r4, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001c84:	4603      	mov	r3, r0
    _stm32_dma_streams[i].stream->CR = 0U;
 8001c86:	4602      	mov	r2, r0
  dma_streams_mask = 0U;
 8001c88:	6030      	str	r0, [r6, #0]
 8001c8a:	e00d      	b.n	8001ca8 <main+0x98>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000
 8001c94:	20000a58 	.word	0x20000a58
 8001c98:	08002904 	.word	0x08002904
 8001c9c:	40026010 	.word	0x40026010
 8001ca0:	200009d8 	.word	0x200009d8
 8001ca4:	f851 5c0c 	ldr.w	r5, [r1, #-12]
    _stm32_dma_streams[i].stream->CR = 0U;
 8001ca8:	602a      	str	r2, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001caa:	f847 2033 	str.w	r2, [r7, r3, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001cae:	3301      	adds	r3, #1
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	f101 010c 	add.w	r1, r1, #12
 8001cb6:	d1f5      	bne.n	8001ca4 <main+0x94>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001cb8:	48bf      	ldr	r0, [pc, #764]	; (8001fb8 <main+0x3a8>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001cba:	4dc0      	ldr	r5, [pc, #768]	; (8001fbc <main+0x3ac>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001cbc:	4bc0      	ldr	r3, [pc, #768]	; (8001fc0 <main+0x3b0>)
 8001cbe:	49c1      	ldr	r1, [pc, #772]	; (8001fc4 <main+0x3b4>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001cc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001cc4:	6084      	str	r4, [r0, #8]
 8001cc6:	2260      	movs	r2, #96	; 0x60
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001cc8:	60c4      	str	r4, [r0, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001cca:	2780      	movs	r7, #128	; 0x80
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001ccc:	60ac      	str	r4, [r5, #8]
 8001cce:	f44f 7080 	mov.w	r0, #256	; 0x100
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001cd2:	60ec      	str	r4, [r5, #12]
 8001cd4:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001cd8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001cdc:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8001ce0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001ce4:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ce8:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001cec:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001cf0:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001cf4:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001cf8:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001cfa:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001cfe:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d02:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d04:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d08:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d0c:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d0e:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8001d12:	19ce      	adds	r6, r1, r7
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d14:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d18:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d1a:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
    _pal_init_event(i);
 8001d1e:	2500      	movs	r5, #0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d20:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d24:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d26:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d2a:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d2e:	6058      	str	r0, [r3, #4]
 8001d30:	600d      	str	r5, [r1, #0]
 8001d32:	604d      	str	r5, [r1, #4]
 8001d34:	3108      	adds	r1, #8
  for (i = 0; i < 16; i++) {
 8001d36:	42b1      	cmp	r1, r6
 8001d38:	d1fa      	bne.n	8001d30 <main+0x120>
  sdp->vmt = &vmt;
 8001d3a:	4ea3      	ldr	r6, [pc, #652]	; (8001fc8 <main+0x3b8>)
  adcp->state    = ADC_STOP;
 8001d3c:	4ba3      	ldr	r3, [pc, #652]	; (8001fcc <main+0x3bc>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d3e:	4fa0      	ldr	r7, [pc, #640]	; (8001fc0 <main+0x3b0>)
 8001d40:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 8002014 <main+0x404>
  adcp->config   = NULL;
 8001d44:	605d      	str	r5, [r3, #4]
 8001d46:	4634      	mov	r4, r6
  adcp->state    = ADC_STOP;
 8001d48:	f04f 0a01 	mov.w	sl, #1
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d50:	f04f 0960 	mov.w	r9, #96	; 0x60
 8001d54:	f883 a000 	strb.w	sl, [r3]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001d58:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8002018 <main+0x408>
 8001d5c:	f887 9312 	strb.w	r9, [r7, #786]	; 0x312
  ADCD1.adc = ADC1;
 8001d60:	489b      	ldr	r0, [pc, #620]	; (8001fd0 <main+0x3c0>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d62:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001d66:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 800201c <main+0x40c>
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d6a:	603a      	str	r2, [r7, #0]
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001d6c:	4999      	ldr	r1, [pc, #612]	; (8001fd4 <main+0x3c4>)
 8001d6e:	f844 cb04 	str.w	ip, [r4], #4
  iqp->q_top     = bp + size;
 8001d72:	f106 0264 	add.w	r2, r6, #100	; 0x64
  tqp->next = (thread_t *)tqp;
 8001d76:	f103 0918 	add.w	r9, r3, #24
 8001d7a:	f106 0c0c 	add.w	ip, r6, #12
  ADCD1.adc = ADC1;
 8001d7e:	6298      	str	r0, [r3, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001d80:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  iqp->q_buffer  = bp;
 8001d84:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8001d88:	f106 0e30 	add.w	lr, r6, #48	; 0x30
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001d8c:	6319      	str	r1, [r3, #48]	; 0x30
  oqp->q_counter = size;
 8001d8e:	2110      	movs	r1, #16
  adcp->samples  = NULL;
 8001d90:	609d      	str	r5, [r3, #8]
  adcp->depth    = 0;
 8001d92:	60dd      	str	r5, [r3, #12]
  adcp->grpp     = NULL;
 8001d94:	611d      	str	r5, [r3, #16]
  adcp->thread   = NULL;
 8001d96:	615d      	str	r5, [r3, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8001d98:	621d      	str	r5, [r3, #32]
  iqp->q_counter = 0;
 8001d9a:	6175      	str	r5, [r6, #20]
 8001d9c:	6074      	str	r4, [r6, #4]
  oqp->q_counter = size;
 8001d9e:	63b1      	str	r1, [r6, #56]	; 0x38
  iqp->q_top     = bp + size;
 8001da0:	61f2      	str	r2, [r6, #28]
  oqp->q_buffer  = bp;
 8001da2:	63f2      	str	r2, [r6, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8001da4:	64b2      	str	r2, [r6, #72]	; 0x48
 8001da6:	f8c3 9018 	str.w	r9, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 8001daa:	f8c3 901c 	str.w	r9, [r3, #28]
  tqp->next = (thread_t *)tqp;
 8001dae:	f8c6 c00c 	str.w	ip, [r6, #12]
  tqp->prev = (thread_t *)tqp;
 8001db2:	f8c6 c010 	str.w	ip, [r6, #16]
  iqp->q_buffer  = bp;
 8001db6:	61b0      	str	r0, [r6, #24]
  iqp->q_rdptr   = bp;
 8001db8:	6270      	str	r0, [r6, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001dba:	6230      	str	r0, [r6, #32]
  tqp->next = (thread_t *)tqp;
 8001dbc:	f8c6 e030 	str.w	lr, [r6, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8001dc0:	f8c6 e034 	str.w	lr, [r6, #52]	; 0x34
  sdp->state = SD_STOP;
 8001dc4:	f886 a008 	strb.w	sl, [r6, #8]
  iqp->q_notify  = infy;
 8001dc8:	62b5      	str	r5, [r6, #40]	; 0x28
  iqp->q_link    = link;
 8001dca:	62f6      	str	r6, [r6, #44]	; 0x2c
  oqp->q_counter = size;
 8001dcc:	9101      	str	r1, [sp, #4]
 8001dce:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
  oqp->q_wrptr   = bp;
 8001dd2:	6472      	str	r2, [r6, #68]	; 0x44
 8001dd4:	ea43 030a 	orr.w	r3, r3, sl
  oqp->q_link    = link;
 8001dd8:	6536      	str	r6, [r6, #80]	; 0x50
 8001dda:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8001dde:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001de2:	487d      	ldr	r0, [pc, #500]	; (8001fd8 <main+0x3c8>)
  oqp->q_notify  = onfy;
 8001de4:	4a7d      	ldr	r2, [pc, #500]	; (8001fdc <main+0x3cc>)
 8001de6:	64f2      	str	r2, [r6, #76]	; 0x4c
  ST_ENABLE_CLOCK();
 8001de8:	ea43 030a 	orr.w	r3, r3, sl
 8001dec:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
  ST_ENABLE_STOP();
 8001df0:	6882      	ldr	r2, [r0, #8]
  tqp->next = (thread_t *)tqp;
 8001df2:	4c7b      	ldr	r4, [pc, #492]	; (8001fe0 <main+0x3d0>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8001df4:	f8df e228 	ldr.w	lr, [pc, #552]	; 8002020 <main+0x410>
 8001df8:	f8c6 e074 	str.w	lr, [r6, #116]	; 0x74

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  oqp->q_top     = bp + size;
 8001e00:	f106 0e74 	add.w	lr, r6, #116	; 0x74
  ST_ENABLE_STOP();
 8001e04:	ea42 020a 	orr.w	r2, r2, sl
 8001e08:	f8c6 e040 	str.w	lr, [r6, #64]	; 0x40
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e0c:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 8001e10:	6082      	str	r2, [r0, #8]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001e12:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e16:	f04f 0980 	mov.w	r9, #128	; 0x80
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001e1a:	f104 021c 	add.w	r2, r4, #28
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001e1e:	f242 0bcf 	movw	fp, #8399	; 0x20cf
 8001e22:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  chTMStartMeasurementX(&tm);
 8001e26:	a802      	add	r0, sp, #8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001e28:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  ch.vtlist.delta = (sysinterval_t)-1;
 8001e2c:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
  STM32_ST_TIM->CCMR1  = 0;
 8001e30:	619d      	str	r5, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 8001e32:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[0] = 0;
 8001e34:	635d      	str	r5, [r3, #52]	; 0x34
  ch.rlist.prio = NOPRIO;
 8001e36:	60a5      	str	r5, [r4, #8]
  STM32_ST_TIM->DIER   = 0;
 8001e38:	60dd      	str	r5, [r3, #12]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8001e3a:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->CR2    = 0;
 8001e3c:	605d      	str	r5, [r3, #4]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001e3e:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001e40:	f8c3 a014 	str.w	sl, [r3, #20]
  ch.vtlist.lasttime = (systime_t)0;
 8001e44:	62a5      	str	r5, [r4, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001e46:	f8c3 a000 	str.w	sl, [r3]
 8001e4a:	f887 931c 	strb.w	r9, [r7, #796]	; 0x31c
  tmp->cumulative = (rttime_t)0;
 8001e4e:	2300      	movs	r3, #0
  ch.tm.offset = (rtcnt_t)0;
 8001e50:	6765      	str	r5, [r4, #116]	; 0x74
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e52:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001e56:	61e2      	str	r2, [r4, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e58:	f8c7 c000 	str.w	ip, [r7]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001e5c:	6222      	str	r2, [r4, #32]
  tmp->cumulative = (rttime_t)0;
 8001e5e:	2200      	movs	r2, #0
  tmp->best       = (rtcnt_t)-1;
 8001e60:	f8cd e008 	str.w	lr, [sp, #8]
  tqp->next = (thread_t *)tqp;
 8001e64:	6024      	str	r4, [r4, #0]
  tmp->cumulative = (rttime_t)0;
 8001e66:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tmp->worst      = (rtcnt_t)0;
 8001e6a:	9503      	str	r5, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8001e6c:	9504      	str	r5, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8001e6e:	9505      	str	r5, [sp, #20]
  chTMStartMeasurementX(&tm);
 8001e70:	f000 fa76 	bl	8002360 <chTMStartMeasurementX.constprop.6>
  chTMStopMeasurementX(&tm);
 8001e74:	a802      	add	r0, sp, #8
 8001e76:	f7ff fc9b 	bl	80017b0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001e7a:	485a      	ldr	r0, [pc, #360]	; (8001fe4 <main+0x3d4>)
  ch.tm.offset = tm.last;
 8001e7c:	9b04      	ldr	r3, [sp, #16]
 8001e7e:	4a5a      	ldr	r2, [pc, #360]	; (8001fe8 <main+0x3d8>)
 8001e80:	6763      	str	r3, [r4, #116]	; 0x74
 8001e82:	4b5a      	ldr	r3, [pc, #360]	; (8001fec <main+0x3dc>)
 8001e84:	6003      	str	r3, [r0, #0]
 8001e86:	f100 030c 	add.w	r3, r0, #12
 8001e8a:	60c3      	str	r3, [r0, #12]
  tqp->prev = (thread_t *)tqp;
 8001e8c:	6103      	str	r3, [r0, #16]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8001e8e:	f102 0310 	add.w	r3, r2, #16
  H_NEXT(&default_heap.header) = NULL;
 8001e92:	6045      	str	r5, [r0, #4]
  H_PAGES(&default_heap.header) = 0;
 8001e94:	6085      	str	r5, [r0, #8]
 8001e96:	6145      	str	r5, [r0, #20]
 8001e98:	6113      	str	r3, [r2, #16]
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
 8001e9a:	2014      	movs	r0, #20
 8001e9c:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8001ea0:	6190      	str	r0, [r2, #24]
 8001ea2:	6253      	str	r3, [r2, #36]	; 0x24
 8001ea4:	f102 0028 	add.w	r0, r2, #40	; 0x28
 8001ea8:	231c      	movs	r3, #28
 8001eaa:	6290      	str	r0, [r2, #40]	; 0x28
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 8001eb2:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8001eb6:	63d0      	str	r0, [r2, #60]	; 0x3c
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
  mp->align = align;
 8001eba:	2004      	movs	r0, #4
  mp->provider = provider;
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <main+0x3e0>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebe:	f8df e164 	ldr.w	lr, [pc, #356]	; 8002024 <main+0x414>
 8001ec2:	6095      	str	r5, [r2, #8]
  mp->next = NULL;
 8001ec4:	6155      	str	r5, [r2, #20]
 8001ec6:	62d5      	str	r5, [r2, #44]	; 0x2c
  mp->align = align;
 8001ec8:	61d0      	str	r0, [r2, #28]
 8001eca:	6350      	str	r0, [r2, #52]	; 0x34
  mp->provider = provider;
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	6393      	str	r3, [r2, #56]	; 0x38
  ch_memcore.nextmem = __heap_base__;
 8001ed0:	f8df c154 	ldr.w	ip, [pc, #340]	; 8002028 <main+0x418>
  tqp->next = (thread_t *)tqp;
 8001ed4:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 8001ed6:	6052      	str	r2, [r2, #4]
 8001ed8:	4846      	ldr	r0, [pc, #280]	; (8001ff4 <main+0x3e4>)
  ch_memcore.endmem  = __heap_end__;
 8001eda:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <main+0x3e8>)
  tp->name      = name;
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <main+0x3ec>)
  tp->prio      = prio;
 8001ede:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 8001ee2:	e88c 0005 	stmia.w	ip, {r0, r2}
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001ee6:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  tp->realprio  = prio;
 8001eea:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
  tp->mtxlist   = NULL;
 8001eee:	66a5      	str	r5, [r4, #104]	; 0x68
  tp->epending  = (eventmask_t)0;
 8001ef0:	6665      	str	r5, [r4, #100]	; 0x64
  tp->refs      = (trefs_t)1;
 8001ef2:	f884 a052 	strb.w	sl, [r4, #82]	; 0x52
  tp->name      = name;
 8001ef6:	64a3      	str	r3, [r4, #72]	; 0x48
 8001ef8:	f8de 000c 	ldr.w	r0, [lr, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <main+0x3f0>)
  REG_INSERT(tp);
 8001efe:	f8d4 b014 	ldr.w	fp, [r4, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001f02:	f8df c128 	ldr.w	ip, [pc, #296]	; 800202c <main+0x41c>
 8001f06:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8001f0e:	4010      	ands	r0, r2
  reg_value  =  (reg_value                                   |
 8001f10:	4303      	orrs	r3, r0
 8001f12:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8001f16:	6424      	str	r4, [r4, #64]	; 0x40
 8001f18:	f8cb 2010 	str.w	r2, [fp, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001f1c:	f8ce 300c 	str.w	r3, [lr, #12]
 8001f20:	f8dc 300c 	ldr.w	r3, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001f24:	4837      	ldr	r0, [pc, #220]	; (8002004 <main+0x3f4>)
 8001f26:	6162      	str	r2, [r4, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	f8cc 300c 	str.w	r3, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001f30:	6803      	ldr	r3, [r0, #0]
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	9901      	ldr	r1, [sp, #4]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001f34:	61a2      	str	r2, [r4, #24]
 8001f36:	ea43 030a 	orr.w	r3, r3, sl
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8001f3a:	64e5      	str	r5, [r4, #76]	; 0x4c
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8001f3c:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
  tlp->next = (thread_t *)tlp;
 8001f40:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8001f44:	6003      	str	r3, [r0, #0]
 8001f46:	f04f 0b20 	mov.w	fp, #32
  tqp->next = (thread_t *)tqp;
 8001f4a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8001f4e:	f88e 101f 	strb.w	r1, [lr, #31]
  tlp->next = (thread_t *)tlp;
 8001f52:	65a2      	str	r2, [r4, #88]	; 0x58
 8001f54:	f88e b022 	strb.w	fp, [lr, #34]	; 0x22
  tqp->next = (thread_t *)tqp;
 8001f58:	65e3      	str	r3, [r4, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
 8001f5a:	6623      	str	r3, [r4, #96]	; 0x60
 8001f5c:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8001f60:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001f62:	f38b 8811 	msr	BASEPRI, fp
  tp->wabase = tdp->wbase;
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <main+0x3f8>)
  REG_INSERT(tp);
 8001f68:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001f6a:	4a28      	ldr	r2, [pc, #160]	; (800200c <main+0x3fc>)
 8001f6c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8002030 <main+0x420>
 8001f70:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f72:	f103 0e6c 	add.w	lr, r3, #108	; 0x6c
 8001f76:	f8c3 e09c 	str.w	lr, [r3, #156]	; 0x9c
  tp->state     = CH_STATE_WTSTART;
 8001f7a:	f04f 0e02 	mov.w	lr, #2
  REG_INSERT(tp);
 8001f7e:	f103 0290 	add.w	r2, r3, #144	; 0x90
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001f82:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
  tp->state     = CH_STATE_WTSTART;
 8001f86:	f883 e0b0 	strb.w	lr, [r3, #176]	; 0xb0
  tlp->next = (thread_t *)tlp;
 8001f8a:	f103 0cb8 	add.w	ip, r3, #184	; 0xb8
  tqp->next = (thread_t *)tqp;
 8001f8e:	f103 0ebc 	add.w	lr, r3, #188	; 0xbc
  tp->name      = name;
 8001f92:	481f      	ldr	r0, [pc, #124]	; (8002010 <main+0x400>)
  REG_INSERT(tp);
 8001f94:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->name      = name;
 8001f98:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001f9c:	671d      	str	r5, [r3, #112]	; 0x70
  tp->prio      = prio;
 8001f9e:	f8c3 a098 	str.w	sl, [r3, #152]	; 0x98
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001fa2:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->realprio  = prio;
 8001fa6:	f8c3 a0cc 	str.w	sl, [r3, #204]	; 0xcc
  tp->mtxlist   = NULL;
 8001faa:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
 8001fae:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  tp->refs      = (trefs_t)1;
 8001fb2:	f883 a0b2 	strb.w	sl, [r3, #178]	; 0xb2
 8001fb6:	e03d      	b.n	8002034 <main+0x424>
 8001fb8:	40026000 	.word	0x40026000
 8001fbc:	40026400 	.word	0x40026400
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	20000808 	.word	0x20000808
 8001fc8:	20000e7c 	.word	0x20000e7c
 8001fcc:	20000e48 	.word	0x20000e48
 8001fd0:	40012000 	.word	0x40012000
 8001fd4:	00022c16 	.word	0x00022c16
 8001fd8:	e0042000 	.word	0xe0042000
 8001fdc:	08000461 	.word	0x08000461
 8001fe0:	20000ef8 	.word	0x20000ef8
 8001fe4:	200009bc 	.word	0x200009bc
 8001fe8:	20000894 	.word	0x20000894
 8001fec:	080016c1 	.word	0x080016c1
 8001ff0:	08001771 	.word	0x08001771
 8001ff4:	20000f70 	.word	0x20000f70
 8001ff8:	20020000 	.word	0x20020000
 8001ffc:	080029e0 	.word	0x080029e0
 8002000:	05fa0300 	.word	0x05fa0300
 8002004:	e0001000 	.word	0xe0001000
 8002008:	200008d8 	.word	0x200008d8
 800200c:	08000451 	.word	0x08000451
 8002010:	080029f8 	.word	0x080029f8
 8002014:	08002a20 	.word	0x08002a20
 8002018:	40023800 	.word	0x40023800
 800201c:	08002988 	.word	0x08002988
 8002020:	40004400 	.word	0x40004400
 8002024:	e000ed00 	.word	0xe000ed00
 8002028:	200009b0 	.word	0x200009b0
 800202c:	e000edf0 	.word	0xe000edf0
 8002030:	080002d1 	.word	0x080002d1
  REG_INSERT(tp);
 8002034:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 8002038:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  chSchWakeupS(tp, MSG_OK);
 800203c:	4610      	mov	r0, r2
  REG_INSERT(tp);
 800203e:	610a      	str	r2, [r1, #16]
  chSchWakeupS(tp, MSG_OK);
 8002040:	2100      	movs	r1, #0
  tlp->next = (thread_t *)tlp;
 8002042:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
 8002046:	f8c3 e0bc 	str.w	lr, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
 800204a:	f8c3 e0c0 	str.w	lr, [r3, #192]	; 0xc0
  REG_INSERT(tp);
 800204e:	6162      	str	r2, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 8002050:	f7fe fba6 	bl	80007a0 <chSchWakeupS>
 8002054:	f385 8811 	msr	BASEPRI, r5
   */
  halInit();
  chSysInit();
  /*===========================================================================*/
  /*----------------------------GPIO Init-------------------------------------*/
  palSetPadMode(GPIOD, 7, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8002058:	4d37      	ldr	r5, [pc, #220]	; (8002138 <main+0x528>)
  palSetPadMode(GPIOB, 5, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800205a:	4c38      	ldr	r4, [pc, #224]	; (800213c <main+0x52c>)
  palSetPadMode(GPIOD, 7, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800205c:	4649      	mov	r1, r9
 800205e:	4628      	mov	r0, r5
 8002060:	2219      	movs	r2, #25
 8002062:	f7fe ff2d 	bl	8000ec0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 5, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8002066:	4659      	mov	r1, fp
 8002068:	4620      	mov	r0, r4
 800206a:	2219      	movs	r2, #25
 800206c:	f7fe ff28 	bl	8000ec0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_INPUT_PULLDOWN);
 8002070:	4649      	mov	r1, r9
 8002072:	4620      	mov	r0, r4
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	f7fe ff23 	bl	8000ec0 <_pal_lld_setgroupmode>
  palClearLine(LED1);
 800207a:	f8a5 901a 	strh.w	r9, [r5, #26]
  palClearLine(LED2);
 800207e:	f8a4 b01a 	strh.w	fp, [r4, #26]
 8002082:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002086:	7a33      	ldrb	r3, [r6, #8]
 8002088:	4553      	cmp	r3, sl
 800208a:	d040      	beq.n	800210e <main+0x4fe>
  USART_TypeDef *u = sdp->usart;
 800208c:	6f73      	ldr	r3, [r6, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800208e:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <main+0x530>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d038      	beq.n	8002106 <main+0x4f6>
 8002094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002098:	4293      	cmp	r3, r2
 800209a:	d034      	beq.n	8002106 <main+0x4f6>
    u->BRR = STM32_PCLK1 / config->speed;
 800209c:	f240 4245 	movw	r2, #1093	; 0x445
 80020a0:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80020a2:	2440      	movs	r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80020a4:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80020a6:	f242 152c 	movw	r5, #8492	; 0x212c
  u->SR = 0;
 80020aa:	2200      	movs	r2, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80020ac:	611c      	str	r4, [r3, #16]
    sdp->rxmask = 0xFF;
 80020ae:	20ff      	movs	r0, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80020b0:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80020b2:	60dd      	str	r5, [r3, #12]
  sdp->state = SD_READY;
 80020b4:	2102      	movs	r1, #2
  u->SR = 0;
 80020b6:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80020b8:	681d      	ldr	r5, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80020ba:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 80020bc:	f886 0078 	strb.w	r0, [r6, #120]	; 0x78
 80020c0:	7231      	strb	r1, [r6, #8]
 80020c2:	f382 8811 	msr	BASEPRI, r2
  // Default is 38400-8-N-1
  // bits :8, stopbits : 1, parity :none, flow control : none
  /* Activates the serial driver 2.
   * PD5(TX) and PD6(RX) are routed to USART2.*/
  sdStart(&SD2, &serialconfig);
  palSetPadMode(GPIOD, 5, PAL_MODE_ALTERNATE(7));
 80020c6:	f240 3282 	movw	r2, #898	; 0x382
 80020ca:	2120      	movs	r1, #32
 80020cc:	481a      	ldr	r0, [pc, #104]	; (8002138 <main+0x528>)
 80020ce:	f7fe fef7 	bl	8000ec0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, 6, PAL_MODE_ALTERNATE(7));
 80020d2:	f240 3282 	movw	r2, #898	; 0x382
 80020d6:	4621      	mov	r1, r4
 80020d8:	4817      	ldr	r0, [pc, #92]	; (8002138 <main+0x528>)
 80020da:	f7fe fef1 	bl	8000ec0 <_pal_lld_setgroupmode>
  chprintf((BaseSequentialStream *)&SD2,"Debug Via Serial Using UART2 \r\n");
 80020de:	4919      	ldr	r1, [pc, #100]	; (8002144 <main+0x534>)
 80020e0:	4819      	ldr	r0, [pc, #100]	; (8002148 <main+0x538>)
 80020e2:	f000 f995 	bl	8002410 <chprintf.constprop.0>
   * Creates thread.
   * Thread * 	chThdCreateStatic (void *wsp, size_t size, tprio_t prio, tfunc_t pf, void *arg)
 	  Creates a new thread into a static memory area. 
    Ordering thread by decreasing priority they are main, Thread1, ...., and idle.
  */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO+1, Thread1, NULL);
 80020e6:	4a19      	ldr	r2, [pc, #100]	; (800214c <main+0x53c>)
 80020e8:	4819      	ldr	r0, [pc, #100]	; (8002150 <main+0x540>)
 80020ea:	2181      	movs	r1, #129	; 0x81
 80020ec:	f000 f940 	bl	8002370 <chThdCreateStatic.constprop.5>
  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO+5, Thread2, NULL);
 80020f0:	4a18      	ldr	r2, [pc, #96]	; (8002154 <main+0x544>)
 80020f2:	4819      	ldr	r0, [pc, #100]	; (8002158 <main+0x548>)
 80020f4:	2185      	movs	r1, #133	; 0x85
 80020f6:	f000 f93b 	bl	8002370 <chThdCreateStatic.constprop.5>
  chThdCreateStatic(waThread3, sizeof(waThread3), NORMALPRIO+3, Thread3, NULL);
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <main+0x54c>)
 80020fc:	4818      	ldr	r0, [pc, #96]	; (8002160 <main+0x550>)
 80020fe:	2183      	movs	r1, #131	; 0x83
 8002100:	f000 f936 	bl	8002370 <chThdCreateStatic.constprop.5>
 8002104:	e7fe      	b.n	8002104 <main+0x4f4>
    u->BRR = STM32_PCLK2 / config->speed;
 8002106:	f640 028b 	movw	r2, #2187	; 0x88b
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	e7c9      	b.n	80020a2 <main+0x492>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 800210e:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8002112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002116:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 800211a:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800211e:	2240      	movs	r2, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002120:	21c0      	movs	r1, #192	; 0xc0
 8002122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002126:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 800212a:	f887 1326 	strb.w	r1, [r7, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800212e:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	e7aa      	b.n	800208c <main+0x47c>
 8002136:	bf00      	nop
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40020400 	.word	0x40020400
 8002140:	40011000 	.word	0x40011000
 8002144:	08002a00 	.word	0x08002a00
 8002148:	20000e7c 	.word	0x20000e7c
 800214c:	08001801 	.word	0x08001801
 8002150:	20000a70 	.word	0x20000a70
 8002154:	08001a71 	.word	0x08001a71
 8002158:	20000bb8 	.word	0x20000bb8
 800215c:	08001851 	.word	0x08001851
 8002160:	20000d00 	.word	0x20000d00
	...

08002170 <_port_irq_epilogue>:
 8002170:	2320      	movs	r3, #32
 8002172:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <_port_irq_epilogue+0x44>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800217e:	d102      	bne.n	8002186 <_port_irq_epilogue+0x16>
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002186:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800218a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800218e:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8002192:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002196:	f382 8809 	msr	PSP, r2
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <_port_irq_epilogue+0x48>)
 800219c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800219e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80021a0:	6889      	ldr	r1, [r1, #8]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80021a6:	bf8c      	ite	hi
 80021a8:	4a04      	ldrhi	r2, [pc, #16]	; (80021bc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80021aa:	4a05      	ldrls	r2, [pc, #20]	; (80021c0 <_port_irq_epilogue+0x50>)
 80021ac:	f843 2c08 	str.w	r2, [r3, #-8]
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00
 80021b8:	20000ef8 	.word	0x20000ef8
 80021bc:	080002e1 	.word	0x080002e1
 80021c0:	080002e4 	.word	0x080002e4
	...

080021d0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80021d0:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 80021d4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80021d6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80021da:	2300      	movs	r3, #0
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
	...

080021f0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  elp = esp->next;
 80021f2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 80021f4:	42a0      	cmp	r0, r4
 80021f6:	d022      	beq.n	800223e <chEvtBroadcastFlagsI+0x4e>
 80021f8:	460d      	mov	r5, r1
 80021fa:	4607      	mov	r7, r0
    tp->u.rdymsg = MSG_OK;
 80021fc:	2600      	movs	r6, #0
 80021fe:	e002      	b.n	8002206 <chEvtBroadcastFlagsI+0x16>
    elp = elp->next;
 8002200:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8002202:	42a7      	cmp	r7, r4
 8002204:	d01b      	beq.n	800223e <chEvtBroadcastFlagsI+0x4e>
    elp->flags |= flags;
 8002206:	68e3      	ldr	r3, [r4, #12]
 8002208:	432b      	orrs	r3, r5
 800220a:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800220c:	b115      	cbz	r5, 8002214 <chEvtBroadcastFlagsI+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 800220e:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8002210:	4213      	tst	r3, r2
 8002212:	d0f5      	beq.n	8002200 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->listener, elp->events);
 8002214:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
 8002216:	68a3      	ldr	r3, [r4, #8]
 8002218:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800221a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 800221e:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002220:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8002222:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002224:	d00c      	beq.n	8002240 <chEvtBroadcastFlagsI+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8002226:	2a0b      	cmp	r2, #11
 8002228:	d1ea      	bne.n	8002200 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800222a:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 800222c:	ea32 0303 	bics.w	r3, r2, r3
 8002230:	d1e6      	bne.n	8002200 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
 8002232:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002234:	f7fe fb8c 	bl	8000950 <chSchReadyI>
    elp = elp->next;
 8002238:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800223a:	42a7      	cmp	r7, r4
 800223c:	d1e3      	bne.n	8002206 <chEvtBroadcastFlagsI+0x16>
 800223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8002240:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002242:	4213      	tst	r3, r2
 8002244:	d0dc      	beq.n	8002200 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
 8002246:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002248:	f7fe fb82 	bl	8000950 <chSchReadyI>
 800224c:	e7f4      	b.n	8002238 <chEvtBroadcastFlagsI+0x48>
 800224e:	bf00      	nop

08002250 <button_cb>:
static void button_cb(void *arg) {
 8002250:	b508      	push	{r3, lr}
 8002252:	2320      	movs	r3, #32
 8002254:	f383 8811 	msr	BASEPRI, r3
  if (palReadLine(BUTTON1) == BUTTON_PRESSED) {
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <button_cb+0x30>)
 800225a:	6919      	ldr	r1, [r3, #16]
 800225c:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 8002260:	b931      	cbnz	r1, 8002270 <button_cb+0x20>
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8002262:	4808      	ldr	r0, [pc, #32]	; (8002284 <button_cb+0x34>)
 8002264:	f7ff ffc4 	bl	80021f0 <chEvtBroadcastFlagsI>
 8002268:	2300      	movs	r3, #0
 800226a:	f383 8811 	msr	BASEPRI, r3
 800226e:	bd08      	pop	{r3, pc}
 8002270:	2100      	movs	r1, #0
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <button_cb+0x38>)
 8002274:	f7ff ffbc 	bl	80021f0 <chEvtBroadcastFlagsI>
 8002278:	2300      	movs	r3, #0
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	bd08      	pop	{r3, pc}
 8002280:	40020400 	.word	0x40020400
 8002284:	20000890 	.word	0x20000890
 8002288:	2000088c 	.word	0x2000088c
 800228c:	00000000 	.word	0x00000000

08002290 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8002290:	b161      	cbz	r1, 80022ac <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002294:	b410      	push	{r4}
 8002296:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8002298:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800229a:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800229c:	2004      	movs	r0, #4
 800229e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 80022a2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80022a4:	6053      	str	r3, [r2, #4]
}
 80022a6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80022a8:	f7fe bac2 	b.w	8000830 <chSchGoSleepTimeoutS>
}
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000ef8 	.word	0x20000ef8
	...

080022c0 <adc_lld_start_conversion.constprop.22>:
  const ADCConversionGroup *grpp = adcp->grpp;
 80022c0:	4a24      	ldr	r2, [pc, #144]	; (8002354 <adc_lld_start_conversion.constprop.22+0x94>)
 80022c2:	6913      	ldr	r3, [r2, #16]
  if (grpp->circular) {
 80022c4:	7819      	ldrb	r1, [r3, #0]
void adc_lld_start_conversion(ADCDriver *adcp) {
 80022c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  mode = adcp->dmamode;
 80022c8:	6b14      	ldr	r4, [r2, #48]	; 0x30
  if (grpp->circular) {
 80022ca:	2900      	cmp	r1, #0
 80022cc:	d12e      	bne.n	800232c <adc_lld_start_conversion.constprop.22+0x6c>
 80022ce:	68d1      	ldr	r1, [r2, #12]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80022d0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 80022d2:	885d      	ldrh	r5, [r3, #2]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80022d4:	6800      	ldr	r0, [r0, #0]
 80022d6:	6896      	ldr	r6, [r2, #8]
 80022d8:	60c6      	str	r6, [r0, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 80022da:	fb01 f105 	mul.w	r1, r1, r5
 80022de:	6041      	str	r1, [r0, #4]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 80022e0:	68d9      	ldr	r1, [r3, #12]
  dmaStreamSetMode(adcp->dmastp, mode);
 80022e2:	6004      	str	r4, [r0, #0]
  dmaStreamEnable(adcp->dmastp);
 80022e4:	6807      	ldr	r7, [r0, #0]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 80022e6:	69de      	ldr	r6, [r3, #28]
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 80022e8:	691c      	ldr	r4, [r3, #16]
  adcp->adc->SR    = 0;
 80022ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
  dmaStreamEnable(adcp->dmastp);
 80022ec:	f047 0701 	orr.w	r7, r7, #1
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 80022f0:	3d01      	subs	r5, #1
  dmaStreamEnable(adcp->dmastp);
 80022f2:	6007      	str	r7, [r0, #0]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 80022f4:	ea46 5505 	orr.w	r5, r6, r5, lsl #20
  adcp->adc->SMPR1 = grpp->smpr1;
 80022f8:	695f      	ldr	r7, [r3, #20]
  adcp->adc->SMPR2 = grpp->smpr2;
 80022fa:	699e      	ldr	r6, [r3, #24]
  adcp->adc->SQR2  = grpp->sqr2;
 80022fc:	6a18      	ldr	r0, [r3, #32]
  adcp->adc->SQR3  = grpp->sqr3;
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8002300:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  adcp->adc->SR    = 0;
 8002304:	f04f 0e00 	mov.w	lr, #0
 8002308:	f8c2 e000 	str.w	lr, [r2]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 800230c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  adcp->adc->SMPR1 = grpp->smpr1;
 8002310:	60d7      	str	r7, [r2, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8002312:	6116      	str	r6, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8002314:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 8002316:	6310      	str	r0, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8002318:	6353      	str	r3, [r2, #52]	; 0x34
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 800231a:	0063      	lsls	r3, r4, #1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 800231c:	6051      	str	r1, [r2, #4]
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 800231e:	d40d      	bmi.n	800233c <adc_lld_start_conversion.constprop.22+0x7c>
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8002320:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8002324:	f044 0401 	orr.w	r4, r4, #1
    adcp->adc->CR2 = cr2;
 8002328:	6094      	str	r4, [r2, #8]
 800232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (adcp->depth > 1) {
 800232c:	68d1      	ldr	r1, [r2, #12]
 800232e:	2901      	cmp	r1, #1
    mode |= STM32_DMA_CR_CIRC;
 8002330:	bf94      	ite	ls
 8002332:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
      mode |= STM32_DMA_CR_HTIE;
 8002336:	f444 7484 	orrhi.w	r4, r4, #264	; 0x108
 800233a:	e7c9      	b.n	80022d0 <adc_lld_start_conversion.constprop.22+0x10>
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 800233c:	f024 4380 	bic.w	r3, r4, #1073741824	; 0x40000000
 8002340:	f240 3103 	movw	r1, #771	; 0x303
 8002344:	f023 0302 	bic.w	r3, r3, #2
 8002348:	430b      	orrs	r3, r1
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 800234a:	430c      	orrs	r4, r1
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 800234c:	6093      	str	r3, [r2, #8]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 800234e:	6094      	str	r4, [r2, #8]
 8002350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002352:	bf00      	nop
 8002354:	20000e48 	.word	0x20000e48
	...

08002360 <chTMStartMeasurementX.constprop.6>:
  return DWT->CYCCNT;
 8002360:	4b01      	ldr	r3, [pc, #4]	; (8002368 <chTMStartMeasurementX.constprop.6+0x8>)
 8002362:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8002364:	6083      	str	r3, [r0, #8]
 8002366:	4770      	bx	lr
 8002368:	e0001000 	.word	0xe0001000
 800236c:	00000000 	.word	0x00000000

08002370 <chThdCreateStatic.constprop.5>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	4603      	mov	r3, r0
 8002374:	2020      	movs	r0, #32
 8002376:	f380 8811 	msr	BASEPRI, r0
  REG_INSERT(tp);
 800237a:	4e1f      	ldr	r6, [pc, #124]	; (80023f8 <chThdCreateStatic.constprop.5+0x88>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800237c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  REG_INSERT(tp);
 8002380:	6970      	ldr	r0, [r6, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002382:	4c1e      	ldr	r4, [pc, #120]	; (80023fc <chThdCreateStatic.constprop.5+0x8c>)
  tp->prio      = prio;
 8002384:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002388:	f103 05dc 	add.w	r5, r3, #220	; 0xdc
  tp->refs      = (trefs_t)1;
 800238c:	2201      	movs	r2, #1
  tp->realprio  = prio;
 800238e:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002392:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
 8002396:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  tp = (thread_t *)((uint8_t *)wsp + size -
 800239a:	f503 7580 	add.w	r5, r3, #256	; 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800239e:	2400      	movs	r4, #0
  list_init(&tp->waiting);
 80023a0:	f503 7194 	add.w	r1, r3, #296	; 0x128
  tp->refs      = (trefs_t)1;
 80023a4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
  tp->state     = CH_STATE_WTSTART;
 80023a8:	f04f 0e02 	mov.w	lr, #2
  queue_init(&tp->msgqueue);
 80023ac:	f503 7296 	add.w	r2, r3, #300	; 0x12c
  tp->name      = name;
 80023b0:	4f13      	ldr	r7, [pc, #76]	; (8002400 <chThdCreateStatic.constprop.5+0x90>)
  REG_INSERT(tp);
 80023b2:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  tp->wabase = (stkalign_t *)wsp;
 80023b6:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  tp->state     = CH_STATE_WTSTART;
 80023ba:	f883 e120 	strb.w	lr, [r3, #288]	; 0x120
  tp->name      = name;
 80023be:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80023c2:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
  tp->flags     = CH_FLAG_MODE_STATIC;
 80023c6:	f883 4121 	strb.w	r4, [r3, #289]	; 0x121
  tp->mtxlist   = NULL;
 80023ca:	f8c3 4138 	str.w	r4, [r3, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
 80023ce:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
  REG_INSERT(tp);
 80023d2:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 80023d6:	6105      	str	r5, [r0, #16]
  tlp->next = (thread_t *)tlp;
 80023d8:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
  chSchWakeupS(tp, MSG_OK);
 80023dc:	4628      	mov	r0, r5
  tqp->next = (thread_t *)tqp;
 80023de:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 80023e2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 80023e6:	4621      	mov	r1, r4
  REG_INSERT(tp);
 80023e8:	6175      	str	r5, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 80023ea:	f7fe f9d9 	bl	80007a0 <chSchWakeupS>
 80023ee:	f384 8811 	msr	BASEPRI, r4
}
 80023f2:	4628      	mov	r0, r5
 80023f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000ef8 	.word	0x20000ef8
 80023fc:	080002d1 	.word	0x080002d1
 8002400:	08002a48 	.word	0x08002a48
	...

08002410 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002410:	b40e      	push	{r1, r2, r3}
 8002412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af0f      	add	r7, sp, #60	; 0x3c
 800241a:	4d9f      	ldr	r5, [pc, #636]	; (8002698 <chprintf.constprop.0+0x288>)
 800241c:	f857 6b04 	ldr.w	r6, [r7], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002420:	9702      	str	r7, [sp, #8]
  int n = 0;
 8002422:	f04f 0b00 	mov.w	fp, #0
    c = *fmt++;
 8002426:	7831      	ldrb	r1, [r6, #0]
 8002428:	1c73      	adds	r3, r6, #1
    if (c == 0)
 800242a:	b161      	cbz	r1, 8002446 <chprintf.constprop.0+0x36>
    if (c != '%') {
 800242c:	2925      	cmp	r1, #37	; 0x25
 800242e:	d010      	beq.n	8002452 <chprintf.constprop.0+0x42>
      streamPut(chp, (uint8_t)c);
 8002430:	682a      	ldr	r2, [r5, #0]
 8002432:	4899      	ldr	r0, [pc, #612]	; (8002698 <chprintf.constprop.0+0x288>)
 8002434:	68d2      	ldr	r2, [r2, #12]
    c = *fmt++;
 8002436:	461e      	mov	r6, r3
      streamPut(chp, (uint8_t)c);
 8002438:	4790      	blx	r2
    c = *fmt++;
 800243a:	7831      	ldrb	r1, [r6, #0]
      n++;
 800243c:	f10b 0b01 	add.w	fp, fp, #1
    c = *fmt++;
 8002440:	1c73      	adds	r3, r6, #1
    if (c == 0)
 8002442:	2900      	cmp	r1, #0
 8002444:	d1f2      	bne.n	800242c <chprintf.constprop.0+0x1c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002446:	4658      	mov	r0, fp
 8002448:	b006      	add	sp, #24
 800244a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800244e:	b003      	add	sp, #12
 8002450:	4770      	bx	lr
    if (*fmt == '-') {
 8002452:	7872      	ldrb	r2, [r6, #1]
 8002454:	2a2d      	cmp	r2, #45	; 0x2d
 8002456:	bf03      	ittte	eq
 8002458:	78b2      	ldrbeq	r2, [r6, #2]
      fmt++;
 800245a:	1cb3      	addeq	r3, r6, #2
      left_align = TRUE;
 800245c:	f04f 0c01 	moveq.w	ip, #1
    left_align = FALSE;
 8002460:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8002464:	2a30      	cmp	r2, #48	; 0x30
 8002466:	bf03      	ittte	eq
 8002468:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800246a:	3301      	addeq	r3, #1
      filler = '0';
 800246c:	f04f 0930 	moveq.w	r9, #48	; 0x30
    filler = ' ';
 8002470:	f04f 0920 	movne.w	r9, #32
 8002474:	1c59      	adds	r1, r3, #1
    width = 0;
 8002476:	2400      	movs	r4, #0
 8002478:	e005      	b.n	8002486 <chprintf.constprop.0+0x76>
        c = va_arg(ap, int);
 800247a:	783b      	ldrb	r3, [r7, #0]
 800247c:	3704      	adds	r7, #4
 800247e:	f811 2b01 	ldrb.w	r2, [r1], #1
      width = width * 10 + c;
 8002482:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8002486:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b09      	cmp	r3, #9
      c = *fmt++;
 800248e:	460e      	mov	r6, r1
      width = width * 10 + c;
 8002490:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8002494:	d9f3      	bls.n	800247e <chprintf.constprop.0+0x6e>
      else if (c == '*')
 8002496:	2a2a      	cmp	r2, #42	; 0x2a
 8002498:	d0ef      	beq.n	800247a <chprintf.constprop.0+0x6a>
    if (c == '.') {
 800249a:	2a2e      	cmp	r2, #46	; 0x2e
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	d043      	beq.n	800252a <chprintf.constprop.0+0x11a>
    if (c == 'l' || c == 'L') {
 80024a2:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80024a6:	2b4c      	cmp	r3, #76	; 0x4c
 80024a8:	d04e      	beq.n	8002548 <chprintf.constprop.0+0x138>
    switch (c) {
 80024aa:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 80024ae:	2834      	cmp	r0, #52	; 0x34
 80024b0:	f200 8151 	bhi.w	8002756 <chprintf.constprop.0+0x346>
 80024b4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80024b8:	014f00fe 	.word	0x014f00fe
 80024bc:	014f014f 	.word	0x014f014f
 80024c0:	00fe014f 	.word	0x00fe014f
 80024c4:	014f014f 	.word	0x014f014f
 80024c8:	014f014f 	.word	0x014f014f
 80024cc:	00f8014f 	.word	0x00f8014f
 80024d0:	014f014f 	.word	0x014f014f
 80024d4:	014f014f 	.word	0x014f014f
 80024d8:	0088014f 	.word	0x0088014f
 80024dc:	014f014f 	.word	0x014f014f
 80024e0:	014f00fb 	.word	0x014f00fb
 80024e4:	014f014f 	.word	0x014f014f
 80024e8:	014f014f 	.word	0x014f014f
 80024ec:	014f014f 	.word	0x014f014f
 80024f0:	014f014f 	.word	0x014f014f
 80024f4:	0143014f 	.word	0x0143014f
 80024f8:	014f00fe 	.word	0x014f00fe
 80024fc:	014f014f 	.word	0x014f014f
 8002500:	00fe014f 	.word	0x00fe014f
 8002504:	014f014f 	.word	0x014f014f
 8002508:	014f014f 	.word	0x014f014f
 800250c:	00f8014f 	.word	0x00f8014f
 8002510:	014f014f 	.word	0x014f014f
 8002514:	0129014f 	.word	0x0129014f
 8002518:	0088014f 	.word	0x0088014f
 800251c:	014f014f 	.word	0x014f014f
 8002520:	00fb      	.short	0x00fb
          c = va_arg(ap, int);
 8002522:	783b      	ldrb	r3, [r7, #0]
 8002524:	3704      	adds	r7, #4
        precision += c;
 8002526:	eb03 0140 	add.w	r1, r3, r0, lsl #1
        c = *fmt++;
 800252a:	f816 2b01 	ldrb.w	r2, [r6], #1
        if (c >= '0' && c <= '9')
 800252e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b09      	cmp	r3, #9
        precision *= 10;
 8002536:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9')
 800253a:	d9f4      	bls.n	8002526 <chprintf.constprop.0+0x116>
        else if (c == '*')
 800253c:	2a2a      	cmp	r2, #42	; 0x2a
 800253e:	d0f0      	beq.n	8002522 <chprintf.constprop.0+0x112>
    if (c == 'l' || c == 'L') {
 8002540:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002544:	2b4c      	cmp	r3, #76	; 0x4c
 8002546:	d1b0      	bne.n	80024aa <chprintf.constprop.0+0x9a>
      if (*fmt)
 8002548:	7833      	ldrb	r3, [r6, #0]
 800254a:	b10b      	cbz	r3, 8002550 <chprintf.constprop.0+0x140>
        c = *fmt++;
 800254c:	3601      	adds	r6, #1
 800254e:	461a      	mov	r2, r3
    switch (c) {
 8002550:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8002554:	2b34      	cmp	r3, #52	; 0x34
 8002556:	f200 80fe 	bhi.w	8002756 <chprintf.constprop.0+0x346>
 800255a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800255e:	00ab      	.short	0x00ab
 8002560:	00fc00fc 	.word	0x00fc00fc
 8002564:	00fc00fc 	.word	0x00fc00fc
 8002568:	00fc00ab 	.word	0x00fc00ab
 800256c:	00fc00fc 	.word	0x00fc00fc
 8002570:	00fc00fc 	.word	0x00fc00fc
 8002574:	00fc00a5 	.word	0x00fc00a5
 8002578:	00fc00fc 	.word	0x00fc00fc
 800257c:	00fc00fc 	.word	0x00fc00fc
 8002580:	00fc0035 	.word	0x00fc0035
 8002584:	00a800fc 	.word	0x00a800fc
 8002588:	00fc00fc 	.word	0x00fc00fc
 800258c:	00fc00fc 	.word	0x00fc00fc
 8002590:	00fc00fc 	.word	0x00fc00fc
 8002594:	00fc00fc 	.word	0x00fc00fc
 8002598:	00fc00fc 	.word	0x00fc00fc
 800259c:	00ab00f0 	.word	0x00ab00f0
 80025a0:	00fc00fc 	.word	0x00fc00fc
 80025a4:	00fc00fc 	.word	0x00fc00fc
 80025a8:	00fc00ab 	.word	0x00fc00ab
 80025ac:	00fc00fc 	.word	0x00fc00fc
 80025b0:	00fc00fc 	.word	0x00fc00fc
 80025b4:	00fc00a5 	.word	0x00fc00a5
 80025b8:	00fc00fc 	.word	0x00fc00fc
 80025bc:	00fc00d6 	.word	0x00fc00d6
 80025c0:	00fc0035 	.word	0x00fc0035
 80025c4:	00a800fc 	.word	0x00a800fc
 80025c8:	f04f 080a 	mov.w	r8, #10
        l = va_arg(ap, unsigned int);
 80025cc:	683a      	ldr	r2, [r7, #0]
  q = p + MAX_FILLER;
 80025ce:	f10d 0117 	add.w	r1, sp, #23
        l = va_arg(ap, unsigned int);
 80025d2:	3704      	adds	r7, #4
 80025d4:	e000      	b.n	80025d8 <chprintf.constprop.0+0x1c8>
  } while ((ll /= radix) != 0);
 80025d6:	4601      	mov	r1, r0
    i = (int)(l % radix);
 80025d8:	fbb2 fef8 	udiv	lr, r2, r8
 80025dc:	fb08 221e 	mls	r2, r8, lr, r2
    i += '0';
 80025e0:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 80025e4:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 80025e6:	bfc8      	it	gt
 80025e8:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 80025ec:	b2db      	uxtb	r3, r3
    l /= radix;
 80025ee:	4672      	mov	r2, lr
    *--q = i;
 80025f0:	f801 3c01 	strb.w	r3, [r1, #-1]
 80025f4:	1e48      	subs	r0, r1, #1
  } while ((ll /= radix) != 0);
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	d1ed      	bne.n	80025d6 <chprintf.constprop.0+0x1c6>
  i = (int)(p + MAX_FILLER - q);
 80025fa:	f10d 0217 	add.w	r2, sp, #23
 80025fe:	f10d 080c 	add.w	r8, sp, #12
 8002602:	1a12      	subs	r2, r2, r0
 8002604:	46c6      	mov	lr, r8
 8002606:	4410      	add	r0, r2
 8002608:	e001      	b.n	800260e <chprintf.constprop.0+0x1fe>
 800260a:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 800260e:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
 8002612:	4288      	cmp	r0, r1
 8002614:	d1f9      	bne.n	800260a <chprintf.constprop.0+0x1fa>
 8002616:	1e53      	subs	r3, r2, #1
 8002618:	9301      	str	r3, [sp, #4]
    if ((width -= i) < 0)
 800261a:	1aa4      	subs	r4, r4, r2
 800261c:	d43e      	bmi.n	800269c <chprintf.constprop.0+0x28c>
    if (left_align == FALSE)
 800261e:	f1bc 0f00 	cmp.w	ip, #0
 8002622:	f040 80a1 	bne.w	8002768 <chprintf.constprop.0+0x358>
 8002626:	f1c4 0a00 	rsb	sl, r4, #0
    if (width < 0) {
 800262a:	2c00      	cmp	r4, #0
 800262c:	f000 809b 	beq.w	8002766 <chprintf.constprop.0+0x356>
      if (*s == '-' && filler == '0') {
 8002630:	f898 1000 	ldrb.w	r1, [r8]
 8002634:	292d      	cmp	r1, #45	; 0x2d
 8002636:	f000 80a6 	beq.w	8002786 <chprintf.constprop.0+0x376>
        streamPut(chp, (uint8_t)filler);
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	4649      	mov	r1, r9
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4628      	mov	r0, r5
 8002642:	4798      	blx	r3
      } while (++width != 0);
 8002644:	f11a 0a01 	adds.w	sl, sl, #1
 8002648:	d1f7      	bne.n	800263a <chprintf.constprop.0+0x22a>
    while (--i >= 0) {
 800264a:	9b01      	ldr	r3, [sp, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	44a3      	add	fp, r4
 8002650:	bfa8      	it	ge
 8002652:	4654      	movge	r4, sl
 8002654:	f6ff aee7 	blt.w	8002426 <chprintf.constprop.0+0x16>
 8002658:	f8dd a004 	ldr.w	sl, [sp, #4]
      streamPut(chp, (uint8_t)*s++);
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002662:	68db      	ldr	r3, [r3, #12]
    while (--i >= 0) {
 8002664:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8002668:	4628      	mov	r0, r5
 800266a:	4798      	blx	r3
    while (--i >= 0) {
 800266c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8002670:	d1f4      	bne.n	800265c <chprintf.constprop.0+0x24c>
 8002672:	9b01      	ldr	r3, [sp, #4]
 8002674:	f10b 0b01 	add.w	fp, fp, #1
 8002678:	449b      	add	fp, r3
    while (width) {
 800267a:	2c00      	cmp	r4, #0
 800267c:	f43f aed3 	beq.w	8002426 <chprintf.constprop.0+0x16>
 8002680:	46a0      	mov	r8, r4
      streamPut(chp, (uint8_t)filler);
 8002682:	682b      	ldr	r3, [r5, #0]
 8002684:	4649      	mov	r1, r9
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4628      	mov	r0, r5
 800268a:	4798      	blx	r3
    while (width) {
 800268c:	f1b8 0801 	subs.w	r8, r8, #1
 8002690:	d1f7      	bne.n	8002682 <chprintf.constprop.0+0x272>
 8002692:	44a3      	add	fp, r4
 8002694:	e6c7      	b.n	8002426 <chprintf.constprop.0+0x16>
 8002696:	bf00      	nop
 8002698:	20000e7c 	.word	0x20000e7c
    while (--i >= 0) {
 800269c:	9b01      	ldr	r3, [sp, #4]
 800269e:	2b00      	cmp	r3, #0
      width = 0;
 80026a0:	bfa8      	it	ge
 80026a2:	2400      	movge	r4, #0
    while (--i >= 0) {
 80026a4:	dad8      	bge.n	8002658 <chprintf.constprop.0+0x248>
 80026a6:	e6be      	b.n	8002426 <chprintf.constprop.0+0x16>
    switch (c) {
 80026a8:	f04f 0808 	mov.w	r8, #8
 80026ac:	e78e      	b.n	80025cc <chprintf.constprop.0+0x1bc>
 80026ae:	f04f 0810 	mov.w	r8, #16
 80026b2:	e78b      	b.n	80025cc <chprintf.constprop.0+0x1bc>
        l = va_arg(ap, int);
 80026b4:	6839      	ldr	r1, [r7, #0]
      if (l < 0) {
 80026b6:	2900      	cmp	r1, #0
        l = va_arg(ap, int);
 80026b8:	f107 0704 	add.w	r7, r7, #4
      if (l < 0) {
 80026bc:	db73      	blt.n	80027a6 <chprintf.constprop.0+0x396>
    p = tmpbuf;
 80026be:	f10d 080c 	add.w	r8, sp, #12
 80026c2:	4642      	mov	r2, r8
  q = p + MAX_FILLER;
 80026c4:	f102 030b 	add.w	r3, r2, #11
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	4618      	mov	r0, r3
    i = (int)(l % radix);
 80026cc:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <chprintf.constprop.0+0x3b8>)
 80026ce:	fba3 e301 	umull	lr, r3, r3, r1
 80026d2:	08db      	lsrs	r3, r3, #3
 80026d4:	eb03 0a83 	add.w	sl, r3, r3, lsl #2
 80026d8:	469e      	mov	lr, r3
 80026da:	eba1 034a 	sub.w	r3, r1, sl, lsl #1
    i += '0';
 80026de:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 80026e0:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80026e2:	4671      	mov	r1, lr
    *--q = i;
 80026e4:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 80026e8:	2900      	cmp	r1, #0
 80026ea:	d1ef      	bne.n	80026cc <chprintf.constprop.0+0x2bc>
  i = (int)(p + MAX_FILLER - q);
 80026ec:	9901      	ldr	r1, [sp, #4]
 80026ee:	1a09      	subs	r1, r1, r0
 80026f0:	4411      	add	r1, r2
 80026f2:	e001      	b.n	80026f8 <chprintf.constprop.0+0x2e8>
 80026f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 80026f8:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 80026fc:	428a      	cmp	r2, r1
 80026fe:	d1f9      	bne.n	80026f4 <chprintf.constprop.0+0x2e4>
 8002700:	eba2 0208 	sub.w	r2, r2, r8
 8002704:	1e53      	subs	r3, r2, #1
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	e787      	b.n	800261a <chprintf.constprop.0+0x20a>
      if ((s = va_arg(ap, char *)) == 0)
 800270a:	f8d7 8000 	ldr.w	r8, [r7]
 800270e:	3704      	adds	r7, #4
 8002710:	f1b8 0f00 	cmp.w	r8, #0
 8002714:	d050      	beq.n	80027b8 <chprintf.constprop.0+0x3a8>
      for (p = s; *p && (--precision >= 0); p++)
 8002716:	f898 3000 	ldrb.w	r3, [r8]
      if (precision == 0)
 800271a:	b351      	cbz	r1, 8002772 <chprintf.constprop.0+0x362>
      for (p = s; *p && (--precision >= 0); p++)
 800271c:	b36b      	cbz	r3, 800277a <chprintf.constprop.0+0x36a>
 800271e:	3901      	subs	r1, #1
 8002720:	4642      	mov	r2, r8
 8002722:	e001      	b.n	8002728 <chprintf.constprop.0+0x318>
 8002724:	3901      	subs	r1, #1
 8002726:	d403      	bmi.n	8002730 <chprintf.constprop.0+0x320>
 8002728:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <chprintf.constprop.0+0x314>
 8002730:	eba2 0208 	sub.w	r2, r2, r8
 8002734:	1e53      	subs	r3, r2, #1
 8002736:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8002738:	f04f 0920 	mov.w	r9, #32
 800273c:	e76d      	b.n	800261a <chprintf.constprop.0+0x20a>
      *p++ = va_arg(ap, int);
 800273e:	f10d 0818 	add.w	r8, sp, #24
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f808 3d0c 	strb.w	r3, [r8, #-12]!
 8002748:	2300      	movs	r3, #0
 800274a:	3704      	adds	r7, #4
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	2201      	movs	r2, #1
      filler = ' ';
 8002750:	f04f 0920 	mov.w	r9, #32
 8002754:	e761      	b.n	800261a <chprintf.constprop.0+0x20a>
      *p++ = c;
 8002756:	f10d 0818 	add.w	r8, sp, #24
 800275a:	2300      	movs	r3, #0
 800275c:	f808 2d0c 	strb.w	r2, [r8, #-12]!
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	e759      	b.n	800261a <chprintf.constprop.0+0x20a>
    if (width < 0) {
 8002766:	4654      	mov	r4, sl
    while (--i >= 0) {
 8002768:	9b01      	ldr	r3, [sp, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f6bf af74 	bge.w	8002658 <chprintf.constprop.0+0x248>
 8002770:	e783      	b.n	800267a <chprintf.constprop.0+0x26a>
      for (p = s; *p && (--precision >= 0); p++)
 8002772:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1d2      	bne.n	8002720 <chprintf.constprop.0+0x310>
 800277a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	f04f 0920 	mov.w	r9, #32
 8002784:	e74b      	b.n	800261e <chprintf.constprop.0+0x20e>
      if (*s == '-' && filler == '0') {
 8002786:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 800278a:	f47f af56 	bne.w	800263a <chprintf.constprop.0+0x22a>
        streamPut(chp, (uint8_t)*s++);
 800278e:	682a      	ldr	r2, [r5, #0]
 8002790:	480e      	ldr	r0, [pc, #56]	; (80027cc <chprintf.constprop.0+0x3bc>)
 8002792:	68d2      	ldr	r2, [r2, #12]
 8002794:	4790      	blx	r2
 8002796:	9b01      	ldr	r3, [sp, #4]
 8002798:	3b01      	subs	r3, #1
 800279a:	f108 0801 	add.w	r8, r8, #1
        n++;
 800279e:	f10b 0b01 	add.w	fp, fp, #1
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	e749      	b.n	800263a <chprintf.constprop.0+0x22a>
        *p++ = '-';
 80027a6:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80027a8:	4249      	negs	r1, r1
        *p++ = '-';
 80027aa:	f88d 300c 	strb.w	r3, [sp, #12]
 80027ae:	f10d 020d 	add.w	r2, sp, #13
 80027b2:	f10d 080c 	add.w	r8, sp, #12
 80027b6:	e785      	b.n	80026c4 <chprintf.constprop.0+0x2b4>
        s = "(null)";
 80027b8:	f8df 8014 	ldr.w	r8, [pc, #20]	; 80027d0 <chprintf.constprop.0+0x3c0>
      if (precision == 0)
 80027bc:	2900      	cmp	r1, #0
 80027be:	d1ae      	bne.n	800271e <chprintf.constprop.0+0x30e>
        precision = 32767;
 80027c0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80027c4:	e7ab      	b.n	800271e <chprintf.constprop.0+0x30e>
 80027c6:	bf00      	nop
 80027c8:	cccccccd 	.word	0xcccccccd
 80027cc:	20000e7c 	.word	0x20000e7c
 80027d0:	08002a50 	.word	0x08002a50
